{"version":3,"sources":["Layout/Header.jsx","Layout/NotFound.js","utils/api/index.js","Layout/DeckList.jsx","Layout/BreadcrumbBar.jsx","Layout/DeckForm.jsx","Layout/CreateDeck.jsx","Layout/Study.jsx","Layout/EditDeck.jsx","Layout/CardForm.jsx","Layout/AddCard.jsx","Layout/EditCard.jsx","Layout/ViewDeck.jsx","Layout/Layout.jsx","App.js","index.js"],"names":["Header","className","NotFound","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","a","fetch","response","status","Error","statusText","json","name","listDecks","signal","method","body","JSON","stringify","readDeck","deckId","updatedDeck","id","listAllCards","card","Number","cardId","updatedCard","append","DeckList","state","setState","OnClick","allDecks","setAllDecks","history","useHistory","listItemDecks","Array","from","map","description","cardsNum","length","to","onClick","deleteDeck","event","window","confirm","deckIdToDelete","target","parentNode","go","useEffect","abortController","AbortController","decks","loadState","loadDecksWithCards","abort","type","BreadcrumbBar","nav1","link1","nav2","DeckForm","newDeckObject","setNewDeckObject","editState","setEditState","onCancel","onSubmit","handleChange","value","useRouteMatch","includes","htmlFor","onChange","deckName","editedDeck","rows","deckDescription","placeholder","CreateDeck","Study","currentDeck","setCurrentDeck","useParams","then","cardNumber","flipped","study","number","total","front","back","onFlip","flipBtn","bothBtns","push","num","message","notEnoughCards","EditDeck","useState","placeholderDescription","loadDeck","updateDeck","CardForm","editCardState","setEditCardState","newCard","setNewCard","isNew","AddCard","cardFront","cardBack","createCard","EditCard","params","edit","readCard","updateCard","parseInt","ViewDeck","deckControlButtons","OnEditCard","Layout","darkMode","btnType","createDeck","deleteCard","exact","path","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7bca4303.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"p-5 mb-3 bg-dark text-light\">\r\n      <div className=\"container-fluid py-5 text-center text-md-start\">\r\n        <h1 className=\"display-5 fw-bold\">Flashcards</h1>\r\n        <p className=\"fs-4\">make it easy to study hard</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nfunction NotFound() {\r\n  return (\r\n    <div className=\"NotFound\">\r\n      <h1>Not Found</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NotFound;\r\n","/**\r\n * Defines the base URL for the API.\r\n * The default values is overridden by the `API_BASE_URL` environment variable.\r\n */\r\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\r\n\r\n/**\r\n * Defines the default headers for these functions to work with `json-server`\r\n */\r\nconst headers = new Headers();\r\nheaders.append(\"Content-Type\", \"application/json\");\r\n\r\n/**\r\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\r\n *\r\n * This function is NOT exported because it is not needed outside of this file.\r\n *\r\n * @param deck\r\n *  the deck instance\r\n * @returns {*}\r\n *  a copy of the deck instance with the `cards` property removed.\r\n */\r\nfunction stripCards(deck) {\r\n  const { cards, ...deckWithoutCards } = deck;\r\n  return deckWithoutCards;\r\n}\r\n\r\n/**\r\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\r\n *\r\n * This function is NOT exported because it is not needed outside of this file.\r\n *\r\n * @param url\r\n *  the url for the requst.\r\n * @param options\r\n *  any options for fetch\r\n * @returns {Promise<Error|any>}\r\n *  a promise that resolves to the `json` data or an error.\r\n *  If the response is not in the 200 - 399 range the promise is rejected.\r\n */\r\nasync function fetchJson(url, options) {\r\n  try {\r\n    const response = await fetch(url, options);\r\n    if (response.status < 200 || response.status > 399) {\r\n      throw new Error(`${response.status} - ${response.statusText}`);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    if (error.name !== \"AbortError\") {\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Retrieves all existing decks.\r\n * @returns {Promise<[deck]>}\r\n *  a promise that resolves to a possibly empty array of decks saved in the database.\r\n */\r\nexport async function listDecks(signal) {\r\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\r\n  return await fetchJson(url, { signal });\r\n}\r\n\r\n/**\r\n * Saves deck to the database (public/data/db.json).\r\n * There is no validation done on the deck object, any object will be saved.\r\n * @param deck\r\n *  the deck to save, which must not have an `id` property\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<deck>}\r\n *  a promise that resolves the saved deck, which will now have an `id` property.\r\n */\r\nexport async function createDeck(deck, signal) {\r\n  const url = `${API_BASE_URL}/decks`;\r\n  const options = {\r\n    method: \"POST\",\r\n    headers,\r\n    body: JSON.stringify(stripCards(deck)),\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options);\r\n}\r\n\r\n/**\r\n * Retrieves the deck with the specified `deckId`\r\n * @param deckId\r\n *  the `id` property matching the desired deck.\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<any>}\r\n *  a promise that resolves to the saved deck.\r\n */\r\nexport async function readDeck(deckId, signal) {\r\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\r\n  return await fetchJson(url, { signal });\r\n}\r\n\r\n/**\r\n * Updates an existing deck\r\n * @param updatedDeck\r\n *  the deck to save, which must have an `id` property.\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the updated deck.\r\n */\r\nexport async function updateDeck(updatedDeck, signal) {\r\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\r\n  const options = {\r\n    method: \"PUT\",\r\n    headers,\r\n    body: JSON.stringify(stripCards(updatedDeck)),\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options);\r\n}\r\n\r\n/**\r\n * Deletes the deck with the specified `deckId`.\r\n * @param deckId\r\n *  the id of the deck to delete\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to an empty object.\r\n */\r\nexport async function deleteDeck(deckId, signal) {\r\n  const url = `${API_BASE_URL}/decks/${deckId}`;\r\n  const options = { method: \"DELETE\", signal };\r\n  return await fetchJson(url, options);\r\n}\r\n\r\n/**\r\n * Retrieves all cards associated with the specified `deckId`.\r\n * @param deckId\r\n *  the id of the target deck\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to a possible empty array of cards.\r\n */\r\nexport async function listCards(deckId, signal) {\r\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\r\n  return await fetchJson(url, { signal });\r\n}\r\n\r\n/**\r\n * Retrieves all cards.\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to a possible empty array of cards.\r\n */\r\nexport async function listAllCards(signal) {\r\n  const url = `${API_BASE_URL}/cards`;\r\n  return await fetchJson(url, { signal });\r\n}\r\n\r\n/**\r\n * Creates a new card associated with the specified `deckId`.\r\n * There is no validation that there is an existing deck with the specified `deckId`.\r\n * @param deckId\r\n *  the id of the target deck\r\n * @param card\r\n *  the card to create, which must not have an `id` property\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the new card, which will have an `id` property.\r\n */\r\nexport async function createCard(deckId, card, signal) {\r\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\r\n  // and the card is not related to the deck because the data types of the ID's are different.\r\n  const url = `${API_BASE_URL}/cards`;\r\n  card.deckId = Number(deckId);\r\n  const options = {\r\n    method: \"POST\",\r\n    headers,\r\n    body: JSON.stringify(card),\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options);\r\n}\r\n\r\n/**\r\n * Retrieves the card with the specified `cardId`\r\n * @param cardId\r\n *  the id of the target\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the saved card.\r\n */\r\nexport async function readCard(cardId, signal) {\r\n  const url = `${API_BASE_URL}/cards/${cardId}`;\r\n  return await fetchJson(url, { signal });\r\n}\r\n\r\n/**\r\n * Updates an existing deck\r\n * @param updatedCard\r\n *  the card to save, which must have an `id` property.\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the updated card.\r\n */\r\nexport async function updateCard(updatedCard, signal) {\r\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\r\n  const options = {\r\n    method: \"PUT\",\r\n    headers,\r\n    body: JSON.stringify(updatedCard),\r\n  };\r\n  return await fetchJson(url, options);\r\n}\r\n\r\n/**\r\n * Deletes the card with the specified `cardId`.\r\n * @param cardId\r\n *  the id of the card to delete\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to an empty object.\r\n */\r\nexport async function deleteCard(cardId, signal) {\r\n  const url = `${API_BASE_URL}/cards/${cardId}`;\r\n  const options = { method: \"DELETE\", signal };\r\n  return await fetchJson(url, options);\r\n}\r\n","import React, { useEffect, Fragment } from \"react\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport { listAllCards, listDecks } from \"../utils/api\";\r\nimport Dashboard from \"./Dashboard\";\r\n\r\nfunction DeckList({ state, setState, OnClick, allDecks, setAllDecks }) {\r\n  const history = useHistory();\r\n\r\n  // creates iterable array from allDecks\r\n  const newAllDecksArray = Array.from(allDecks);\r\n\r\n  // returns list items in card format\r\n  const listItemDecks = newAllDecksArray.map((deck) =>\r\n    createCardForDeck(deck.name, deck.description, deck.id, deck.cards.length)\r\n  );\r\n\r\n  // loads all decks\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    async function loadState() {\r\n      const cards = await listAllCards(abortController.signal);\r\n      setState({ ...state, cards: cards });\r\n    }\r\n    loadState();\r\n    //\r\n    async function loadDecksWithCards() {\r\n      const decks = await listDecks(abortController.signal);\r\n      setAllDecks(decks);\r\n    }\r\n    loadDecksWithCards();\r\n    return () => abortController.abort();\r\n  }, [setAllDecks]);\r\n\r\n  async function deleteDeck(event) {\r\n    const restart = window.confirm(\r\n      \"Delete this deck? \\n \\n You will not be able to recover it.\"\r\n    );\r\n    if (restart) {\r\n      const deckIdToDelete = event.target.parentNode.id;\r\n      fetch(`http://localhost:5000/decks/${deckIdToDelete}`, {\r\n        method: \"DELETE\",\r\n      });\r\n      history.go(0);\r\n    }\r\n  }\r\n\r\n  // creates cards from allDecks\r\n  function createCardForDeck(name, description, id, cardsNum) {\r\n    return (\r\n      <Fragment key={id}>\r\n        <li className=\"list-group-item\">\r\n          <div className=\"card border-0\">\r\n            <div className=\"card-body\" id={id}>\r\n              <h5 className=\"card-title\">{name}</h5>\r\n              <p>{`${cardsNum} cards`}</p>\r\n              <p className=\"card-text\">{description}</p>\r\n              <button\r\n                to=\"/\"\r\n                className=\"btn btn-secondary mr-1\"\r\n                id=\"viewDeck\"\r\n                onClick={OnClick}\r\n              >\r\n                View\r\n              </button>\r\n              <button\r\n                to=\"/\"\r\n                className=\"btn btn-primary mr-1\"\r\n                id=\"studyDeck\"\r\n                onClick={OnClick}\r\n              >\r\n                Study\r\n              </button>\r\n              <button\r\n                to=\"/\"\r\n                className=\"btn btn-danger\"\r\n                id=\"deleteDeck\"\r\n                onClick={deleteDeck}\r\n              >\r\n                Delete\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </li>\r\n      </Fragment>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Link to=\"/decks/new\" className=\"text-decoration-none\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-secondary mb-2\"\r\n          id=\"createDeck\"\r\n        >\r\n          <i className=\"bi bi-folder-plus me-2\"></i>\r\n          Create Deck\r\n        </button>\r\n      </Link>\r\n      <ul className=\"list-group\">{listItemDecks}</ul>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default DeckList;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction BreadcrumbBar({ nav1 = \"nav1\", link1 = \"#\", nav2 = false }) {\r\n  return (\r\n    <>\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item\" aria-current=\"page\">\r\n            <Link to=\"/\" className=\"text-decoration-none\">\r\n              Home\r\n            </Link>\r\n          </li>\r\n          <li className=\"breadcrumb-item\" aria-current=\"page\">\r\n            <Link\r\n              to={`${link1}`}\r\n              className={\r\n                nav2\r\n                  ? \"breadcrumb-item text-decoration-none\"\r\n                  : \"breadcrumb-item text-decoration-none active\"\r\n              }\r\n            >\r\n              {nav1}\r\n            </Link>\r\n          </li>\r\n          {nav2 ? (\r\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n              {nav2}\r\n            </li>\r\n          ) : null}\r\n        </ol>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default BreadcrumbBar;\r\n","import React from \"react\";\r\nimport { useRouteMatch } from \"react-router\";\r\n\r\nfunction DeckForm({\r\n  OnClick,\r\n  newDeckObject,\r\n  setNewDeckObject,\r\n  editState,\r\n  setEditState,\r\n  onCancel,\r\n  onSubmit,\r\n}) {\r\n  // create deck handler\r\n  const handleChange = (event) => {\r\n    setNewDeckObject({\r\n      ...newDeckObject,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const handleNameChange = (event) => {\r\n    setEditState({\r\n      ...editState,\r\n      deckName: event.target.value,\r\n      editedDeck: { ...editState.editedDeck, name: event.target.value },\r\n    });\r\n  };\r\n\r\n  const handleDescriptionChange = (event) => {\r\n    setEditState({\r\n      ...editState,\r\n      deckDescription: event.target.value,\r\n      editedDeck: { ...editState.editedDeck, description: event.target.value },\r\n    });\r\n  };\r\n\r\n  const { url } = useRouteMatch();\r\n\r\n  if (url.includes(\"edit\")) {\r\n    return (\r\n      <>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"name\" className=\"form-label\">\r\n            Name\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"name\"\r\n            name=\"deckName\"\r\n            onChange={handleNameChange}\r\n            value={editState.deckName}\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"description\" className=\"form-label\">\r\n            Description\r\n          </label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"description\"\r\n            name=\"deckDescription\"\r\n            rows=\"3\"\r\n            onChange={handleDescriptionChange}\r\n            value={editState.deckDescription}\r\n          ></textarea>\r\n          <button\r\n            className=\"btn btn-secondary mr-2 mt-2\"\r\n            id=\"cancelEditDeck\"\r\n            onClick={onCancel}\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button\r\n            className=\"btn btn-primary mt-2\"\r\n            id=\"submitEditDeck\"\r\n            onClick={onSubmit}\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <form>\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"deck-name\" className=\"form-label\">\r\n          Name\r\n        </label>\r\n        <input\r\n          className=\"form-control\"\r\n          id=\"name\"\r\n          type=\"text\"\r\n          name=\"name\"\r\n          onChange={handleChange}\r\n          value={newDeckObject.name}\r\n          placeholder=\"Deck Name\"\r\n        />\r\n      </div>\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"deck-description\" className=\"form-label\">\r\n          Description\r\n        </label>\r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"description\"\r\n          type=\"password\"\r\n          name=\"description\"\r\n          onChange={handleChange}\r\n          value={newDeckObject.description}\r\n          placeholder=\"Brief description of the deck\"\r\n        />\r\n      </div>\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn btn-secondary mr-2\"\r\n        id=\"cancelCreateDeck\"\r\n        onClick={OnClick}\r\n      >\r\n        Cancel\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn btn-primary\"\r\n        id=\"submitCreateDeck\"\r\n        onClick={OnClick}\r\n      >\r\n        Submit\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default DeckForm;\r\n","import React, { Fragment } from \"react\";\r\nimport BreadcrumbBar from \"./BreadcrumbBar\";\r\nimport DeckForm from \"./DeckForm\";\r\n\r\nfunction CreateDeck({ OnClick, newDeckObject, setNewDeckObject }) {\r\n  return (\r\n    <Fragment>\r\n      <BreadcrumbBar nav1={\"Create Deck\"} />\r\n      <h1>Create Deck</h1>\r\n      <DeckForm\r\n        OnClick={OnClick}\r\n        newDeckObject={newDeckObject}\r\n        setNewDeckObject={setNewDeckObject}\r\n      />\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default CreateDeck;\r\n","import React, { useEffect } from \"react\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport { readDeck } from \"../utils/api\";\r\nimport BreadcrumbBar from \"./BreadcrumbBar\";\r\n\r\nfunction Study({ currentDeck, setCurrentDeck }) {\r\n  const params = useParams();\r\n  const deckId = params.deckId;\r\n  const history = useHistory();\r\n\r\n  // loads current deck and sets state\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    readDeck(deckId, abortController.signal).then((deck) => {\r\n      setCurrentDeck({\r\n        id: deck.id,\r\n        name: deck.name,\r\n        description: deck.description,\r\n        cards: [deck.cards],\r\n        cardNumber: 0,\r\n        flipped: false,\r\n        study: true,\r\n      });\r\n    });\r\n    return () => abortController.abort();\r\n  }, []);\r\n\r\n  // flips card\r\n  const onFlip = () => {\r\n    setCurrentDeck({ ...currentDeck, flipped: !currentDeck.flipped });\r\n  };\r\n\r\n  // next button handler\r\n  const onNext = () => {\r\n    if (currentDeck.cardNumber + 1 === currentDeck.cards[0].length) {\r\n      const restart = window.confirm(\r\n        \"Restart cards? \\n \\n Click 'cancel' to return to the home page.\"\r\n      );\r\n      if (restart) {\r\n        history.go(0);\r\n      } else {\r\n        setCurrentDeck({});\r\n        history.push(\"/\");\r\n      }\r\n    }\r\n    // sets next card\r\n    setCurrentDeck({\r\n      ...currentDeck,\r\n      cardNumber: currentDeck.cardNumber + 1,\r\n      flipped: false,\r\n    });\r\n  };\r\n\r\n  // card buttons\r\n  const flipBtn = (\r\n    <button onClick={onFlip} className=\"btn btn-secondary\">\r\n      Flip\r\n    </button>\r\n  );\r\n\r\n  const bothBtns = (\r\n    <>\r\n      <button\r\n        onClick={onFlip}\r\n        id=\"flipFront\"\r\n        className=\"btn btn-secondary mr-2\"\r\n      >\r\n        Flip\r\n      </button>\r\n      <button onClick={onNext} id=\"flipNext\" className=\"btn btn-primary\">\r\n        Next\r\n      </button>\r\n    </>\r\n  );\r\n\r\n  // compiles current card\r\n  const studyCard = (number, total, front, back) => (\r\n    <div className=\"card\">\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">\r\n          Card {number} of {total}\r\n        </h5>\r\n        <p>{currentDeck.flipped ? back : front}</p>\r\n        {currentDeck.flipped ? bothBtns : flipBtn}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const notEnoughCards = (num) => {\r\n    let message = \"init\";\r\n    if (num === 1) {\r\n      message = \"There is 1 card in this deck.\";\r\n    } else {\r\n      message = `There are ${num} cards in this deck.`;\r\n    }\r\n    return (\r\n      <>\r\n        <BreadcrumbBar\r\n          nav1={currentDeck.name}\r\n          link1={`/decks/${deckId}`}\r\n          nav2={\"Study\"}\r\n        />\r\n        <h1>Study: {currentDeck.name} </h1>\r\n        <h2>Not enough cards.</h2>\r\n        <p>You need at least 3 cards to study. {message}</p>\r\n        <Link\r\n          to={`/decks/${deckId}/cards/new`}\r\n          className=\"btn btn-primary\"\r\n          id=\"addCards\"\r\n        >\r\n          Add Cards\r\n        </Link>\r\n      </>\r\n    );\r\n  };\r\n\r\n  // renders study session\r\n  if (currentDeck.study) {\r\n    if (currentDeck.cards[0].length <= 2) {\r\n      return notEnoughCards(currentDeck.cards[0].length);\r\n    }\r\n    return (\r\n      <>\r\n        <BreadcrumbBar\r\n          nav1={currentDeck.name}\r\n          link1={`/decks/${deckId}`}\r\n          nav2={\"Study\"}\r\n        />\r\n        <h1>Study: {currentDeck.name} </h1>\r\n        {studyCard(\r\n          currentDeck.cardNumber + 1,\r\n          currentDeck.cards[0].length,\r\n          currentDeck.cards[0][currentDeck.cardNumber].front,\r\n          currentDeck.cards[0][currentDeck.cardNumber].back\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n  return <h1>Loading</h1>;\r\n}\r\n\r\nexport default Study;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { readDeck, updateDeck } from \"../utils/api\";\r\nimport BreadcrumbBar from \"./BreadcrumbBar\";\r\nimport DeckForm from \"./DeckForm\";\r\n\r\nfunction EditDeck({ OnClick, newDeckObject }) {\r\n  const params = useParams();\r\n  const deckId = params.deckId;\r\n  const history = useHistory();\r\n\r\n  const [editState, setEditState] = useState({\r\n    decks: { name: \"\", description: \"\" },\r\n    deckName: \"...loading\",\r\n    placeholderDescription: \"...loading\",\r\n    editedDeck: {\r\n      id: deckId,\r\n      name: \"\",\r\n      description: \"\",\r\n    },\r\n  });\r\n\r\n  const onCancel = () => {\r\n    history.push(`/decks/${deckId}`);\r\n  };\r\n\r\n\t// submits updated deck\r\n  const onSubmit = (event) => {\r\n    const abortController = new AbortController();\r\n    updateDeck(editState.editedDeck, abortController.signal);\r\n    history.push(`/decks/${deckId}`);\r\n    return () => abortController.abort();\r\n  };\r\n\r\n\t// loads deck to edit and sets edit state\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    async function loadDeck() {\r\n      const deck = await readDeck(deckId, abortController.signal);\r\n      setEditState({\r\n        ...editState,\r\n        name: deck.name,\r\n        deckName: deck.name,\r\n        deckDescription: deck.description,\r\n      });\r\n    }\r\n    loadDeck();\r\n    return () => abortController.abort();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <BreadcrumbBar\r\n        nav1={editState.name}\r\n        link1={`/decks/${deckId}`}\r\n        nav2={\"Edit Deck\"}\r\n      />\r\n      <h2>Edit Deck</h2>\r\n      <DeckForm\r\n        OnClick={OnClick}\r\n        newDeckObject={newDeckObject}\r\n        editState={editState}\r\n        setEditState={setEditState}\r\n        onCancel={onCancel}\r\n        onSubmit={onSubmit}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EditDeck;\r\n","import React, { Fragment } from \"react\";\r\nimport { useRouteMatch } from \"react-router\";\r\n\r\nfunction CardForm({ editCardState, setEditCardState, newCard, setNewCard }) {\r\n  const { url } = useRouteMatch();\r\n  const isNew = url.includes(\"new\");\r\n\r\n  const handleChange = (event) => {\r\n    if (isNew) {\r\n      setNewCard({ ...newCard, [event.target.name]: event.target.value });\r\n    } else {\r\n      setEditCardState({\r\n        ...editCardState,\r\n        [event.target.name]: event.target.value,\r\n      });\r\n    }\r\n  };\r\n\r\n  if (isNew) {\r\n    return (\r\n      <Fragment>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"Front\" className=\"form-label\">\r\n            Front\r\n          </label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"front\"\r\n            type=\"text\"\r\n            name=\"front\"\r\n            onChange={handleChange}\r\n            value={newCard.front}\r\n            rows=\"2\"\r\n          ></textarea>\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"Back\" className=\"form-label\">\r\n            Back\r\n          </label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"back\"\r\n            type=\"text\"\r\n            name=\"back\"\r\n            onChange={handleChange}\r\n            value={newCard.back}\r\n            rows=\"2\"\r\n          ></textarea>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"Front\" className=\"form-label\">\r\n          Front\r\n        </label>\r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"front\"\r\n          type=\"text\"\r\n          name=\"front\"\r\n          onChange={handleChange}\r\n          value={editCardState.front}\r\n          rows=\"2\"\r\n        ></textarea>\r\n      </div>\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"Back\" className=\"form-label\">\r\n          Back\r\n        </label>\r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"back\"\r\n          type=\"text\"\r\n          name=\"back\"\r\n          onChange={handleChange}\r\n          value={editCardState.back}\r\n          rows=\"2\"\r\n        ></textarea>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default CardForm;\r\n","import React, { Fragment, useEffect } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { createCard, readDeck } from \"../utils/api\";\r\nimport CardForm from \"./CardForm\";\r\nimport BreadcrumbBar from \"./BreadcrumbBar\";\r\n\r\nfunction AddCard({\r\n  setCurrentDeck,\r\n  currentDeck,\r\n  newCard,\r\n  setNewCard,\r\n  editCardState,\r\n  setEditCardState,\r\n}) {\r\n  const history = useHistory();\r\n  const params = useParams();\r\n  const deckId = params.deckId;\r\n\r\n  // sets current deck\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    const deck = readDeck(deckId);\r\n    deck.then((deck) => {\r\n      setCurrentDeck({ ...currentDeck, name: deck.name });\r\n    });\r\n    return () => abortController.abort();\r\n  }, [deckId]);\r\n\r\n  const OnDone = () => {\r\n    history.push(`/decks/${deckId}`);\r\n  };\r\n\r\n  // saves card and re-initializes AddCard component\r\n  const OnSave = () => {\r\n    createCard(currentDeck.id, newCard);\r\n    setNewCard({ ...newCard, front: \"\", back: \"\" });\r\n    history.push(`/decks/${deckId}/cards/new`);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <BreadcrumbBar\r\n        nav1={currentDeck.name}\r\n        link1={`/decks/${deckId}`}\r\n        nav2={\"Add Card\"}\r\n      />\r\n      <h3>{currentDeck.name}: Add Card</h3>\r\n      <CardForm\r\n        newCard={newCard}\r\n        setNewCard={setNewCard}\r\n        cardFront={\"Front side of card\"}\r\n        cardBack={\"Back side of card\"}\r\n        editCardState={editCardState}\r\n        setEditCardState={setEditCardState}\r\n      />\r\n      <button\r\n        className=\"btn btn-secondary mr-2\"\r\n        id=\"doneAddCard\"\r\n        onClick={OnDone}\r\n      >\r\n        Done\r\n      </button>\r\n      <button className=\"btn btn-primary\" id=\"saveAddCard\" onClick={OnSave}>\r\n        Save\r\n      </button>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default AddCard;\r\n","import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { readCard, readDeck, updateCard } from \"../utils/api\";\r\nimport BreadcrumbBar from \"./BreadcrumbBar\";\r\nimport CardForm from \"./CardForm\";\r\n\r\nfunction EditCard({ newCard, setNewCard, currentDeck }) {\r\n  const params = useParams();\r\n  const deckId = params.deckId;\r\n  const cardId = params.cardId;\r\n  const history = useHistory();\r\n\r\n  // initializes component for editing\r\n  const [editCardState, setEditCardState] = useState({\r\n    edit: false,\r\n  });\r\n\r\n  // loads deck and card to edit\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    setNewCard({ front: \"\", back: \"\" });\r\n    readDeck(deckId, abortController.signal)\r\n      .then((deck) => {\r\n        setEditCardState({ ...editCardState, edit: true, deckName: deck.name });\r\n        return readCard(cardId, abortController.signal);\r\n      })\r\n      .then((card) => {\r\n        setEditCardState({\r\n          ...editCardState,\r\n          edit: true,\r\n          deckName: editCardState.deckName,\r\n          front: card.front,\r\n          back: card.back,\r\n        });\r\n      });\r\n    return () => abortController.abort();\r\n  }, []);\r\n\r\n  const onCancel = () => {\r\n    setEditCardState({ edit: false });\r\n    history.push(`/decks/${deckId}`);\r\n  };\r\n\r\n  // compiles and submits updated card\r\n  const onSubmit = () => {\r\n    const editedCard = {\r\n      id: cardId,\r\n      front: editCardState.front,\r\n      back: editCardState.back,\r\n      deckId: parseInt(deckId),\r\n    };\r\n    updateCard(editedCard);\r\n    history.push(`/decks/${deckId}`);\r\n    // resets edit component\r\n    setEditCardState({ edit: false });\r\n  };\r\n\r\n  if (editCardState.edit) {\r\n    return (\r\n      <Fragment>\r\n        <BreadcrumbBar\r\n          nav1={`Deck ${currentDeck.name}`}\r\n          link1={`/decks/${deckId}`}\r\n          nav2={`Edit Card ${cardId}`}\r\n        />\r\n        <h2 className=\"mt-2\">Edit Card</h2>\r\n        <CardForm\r\n          newCard={newCard}\r\n          setNewCard={setNewCard}\r\n          editCardState={editCardState}\r\n          setEditCardState={setEditCardState}\r\n          cardFront={editCardState.front}\r\n          cardBack={editCardState.back}\r\n        />\r\n        <button\r\n          className=\"btn btn-secondary mr-2\"\r\n          id=\"doneEditCard\"\r\n          onClick={onCancel}\r\n        >\r\n          Cancel\r\n        </button>\r\n        <button\r\n          className=\"btn btn-primary\"\r\n          id=\"submitEditCard\"\r\n          onClick={onSubmit}\r\n        >\r\n          Submit\r\n        </button>\r\n      </Fragment>\r\n    );\r\n  }\r\n  return \"Loading\";\r\n}\r\n\r\nexport default EditCard;\r\n","import React, { Fragment, useEffect } from \"react\";\r\nimport { useHistory, useParams, useRouteMatch } from \"react-router-dom\";\r\nimport { readDeck } from \"../utils/api\";\r\nimport BreadcrumbBar from \"./BreadcrumbBar\";\r\n\r\nfunction ViewDeck({ OnClick, currentDeck, setCurrentDeck }) {\r\n  const params = useParams();\r\n  const deckId = params.deckId;\r\n  const history = useHistory();\r\n\r\n  // sets current deck\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    const deck = readDeck(deckId, abortController.signal);\r\n    deck.then((deck) => {\r\n      setCurrentDeck({\r\n        name: deck.name,\r\n        description: deck.description,\r\n        cards: deck.cards,\r\n        id: deck.id,\r\n        study: false,\r\n      });\r\n    });\r\n    return () => abortController.abort();\r\n  }, []);\r\n\r\n  // delete deck handler\r\n  async function deleteDeck(event) {\r\n    const abortController = new AbortController();\r\n    const restart = window.confirm(\r\n      \"Delete this deck? \\n \\n You will not be able to recover it.\"\r\n    );\r\n    if (restart) {\r\n      fetch(`http://localhost:5000/decks/${currentDeck.id}`, {\r\n        method: \"DELETE\",\r\n        signal: abortController.signal,\r\n      });\r\n      history.push(\"/\");\r\n    }\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  const deckControlButtons = (\r\n    <>\r\n      <div className=\"row mb-4\">\r\n        <div className=\"col-8\">\r\n          <button\r\n            className=\"btn btn-secondary mr-2\"\r\n            id=\"editDeck\"\r\n            onClick={OnClick}\r\n            value={deckId}\r\n          >\r\n            Edit\r\n          </button>\r\n          <button\r\n            className=\"btn btn-primary mr-2\"\r\n            id=\"studyDeck\"\r\n            onClick={OnClick}\r\n          >\r\n            Study\r\n          </button>\r\n          <button\r\n            className=\"btn btn-primary mr-2\"\r\n            id=\"addCards\"\r\n            onClick={OnClick}\r\n          >\r\n            Add Cards\r\n          </button>\r\n        </div>\r\n        <div className=\"col text-end\">\r\n          <button\r\n            className=\"btn btn-danger\"\r\n            id=\"deleteDeck\"\r\n            onClick={deleteDeck}\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  const { url } = useRouteMatch();\r\n\r\n  // edit card handler\r\n  const OnEditCard = (event) => {\r\n    const cardId = event.target.parentNode.id;\r\n    history.push(`${url}/cards/${cardId}/edit`);\r\n  };\r\n\r\n  const cardTemplate = (front, back, id) => (\r\n    <Fragment key={id}>\r\n      <li className=\"list-group-item\">\r\n        <div className=\"row\">\r\n          <div className=\"col-sm-6\">\r\n            <div className=\"card border-0\">\r\n              <div className=\"card-body\">\r\n                <p className=\"card-text\">{front}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-sm-6\">\r\n            <div className=\"card border-0\">\r\n              <div className=\"card-body\">\r\n                <p className=\"card-text\">{back}</p>\r\n              </div>\r\n              <div className=\"text-end\" id={`${id}`}>\r\n                <button\r\n                  className=\"btn btn-outline-secondary mr-2\"\r\n                  id=\"editCard\"\r\n                  onClick={OnEditCard}\r\n                >\r\n                  Edit\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-outline-danger\"\r\n                  id=\"deleteCard\"\r\n                  onClick={OnClick}\r\n                >\r\n                  Delete\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </li>\r\n    </Fragment>\r\n  );\r\n\r\n  // compiles cards as list items for current deck\r\n  const cards = currentDeck.cards\r\n    ? currentDeck.cards.map((card) =>\r\n        cardTemplate(card.front, card.back, card.id)\r\n      )\r\n    : \"loading...\";\r\n\r\n  return (\r\n    <Fragment>\r\n      <BreadcrumbBar nav1={currentDeck.name} />\r\n      <h4>{currentDeck.name}</h4>\r\n      <p>{currentDeck.description}</p>\r\n      {deckControlButtons}\r\n      <h2>Cards</h2>\r\n      <ul className=\"list-group mb-4\">{cards}</ul>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default ViewDeck;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Route, Switch, useHistory } from \"react-router-dom\";\r\nimport Header from \"./Header\";\r\nimport NotFound from \"./NotFound\";\r\nimport Dashboard from \"./Dashboard\";\r\nimport CreateDeck from \"./CreateDeck\";\r\nimport Study from \"./Study\";\r\nimport EditDeck from \"./EditDeck\";\r\nimport AddCard from \"./AddCard\";\r\nimport EditCard from \"./EditCard\";\r\nimport { createDeck, deleteCard, deleteDeck } from \"../utils/api\";\r\nimport ViewDeck from \"./ViewDeck\";\r\nimport DeckList from \"./DeckList\";\r\n\r\nfunction Layout() {\r\n  // lifted states\r\n  const [allDecks, setAllDecks] = useState({});\r\n  const [currentDeck, setCurrentDeck] = useState({});\r\n  const [newDeckObject, setNewDeckObject] = useState({\r\n    name: \"\",\r\n    description: \"\",\r\n  });\r\n  const [newCard, setNewCard] = useState({ front: \"\", back: \"\" });\r\n  //\r\n  const [editCardState, setEditCardState] = useState({\r\n    edit: false,\r\n    front: \"Front\",\r\n    back: \"Back\",\r\n  });\r\n\r\n  //main state\r\n  const [state, setState] = useState({\r\n    darkMode: false,\r\n    cards: [],\r\n  });\r\n\r\n  // for navigation\r\n  const history = useHistory();\r\n\r\n  // resets current deck at home screen\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    setCurrentDeck({});\r\n    return () => abortController.abort();\r\n  }, []);\r\n\r\n  // global button handler\r\n  const OnClick = (event) => {\r\n    const btnType = event.target.id;\r\n    const deckId = event.target.parentNode.id;\r\n    if (btnType === \"viewDeck\") {\r\n      history.push(`/decks/${deckId}`);\r\n    }\r\n    if (btnType === \"studyDeck\") {\r\n      history.push(`/decks/${deckId ? deckId : currentDeck.id}/study`);\r\n    }\r\n    if (btnType === \"cancelCreateDeck\") {\r\n      history.push(\"/\");\r\n    }\r\n    if (btnType === \"submitCreateDeck\") {\r\n      createDeck(newDeckObject).then((deck) =>\r\n        history.push(`/decks/${deck.id}`)\r\n      );\r\n    }\r\n    if (btnType === \"addCards\") {\r\n      history.push(`/decks/${deckId ? deckId : currentDeck.id}/cards/new`);\r\n    }\r\n    if (btnType === \"deleteCard\") {\r\n      const restart = window.confirm(\r\n        \"Delete this card? \\n \\n You will not be able to recover it.\"\r\n      );\r\n      if (restart) {\r\n        deleteCard(event.target.parentNode.id);\r\n        history.go(0);\r\n      }\r\n    }\r\n    if (btnType === \"editDeck\") {\r\n      history.push(`/decks/${event.target.value}/edit`);\r\n    }\r\n    if (btnType === \"cancelEditDeck\") {\r\n      history.push(`/decks/${deckId ? deckId : currentDeck.id}/`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <div className=\"container\">\r\n        <Switch>\r\n          {/* HOME */}\r\n          <Route exact={true} path=\"/\">\r\n            <DeckList\r\n              state={state}\r\n              setState={setState}\r\n              OnClick={OnClick}\r\n              allDecks={allDecks}\r\n              setAllDecks={setAllDecks}\r\n            />\r\n          </Route>\r\n          {/* EDIT CARD */}\r\n          <Route path=\"/decks/:deckId/cards/:cardId/edit\">\r\n            <EditCard\r\n              newCard={newCard}\r\n              setNewCard={setNewCard}\r\n              currentDeck={currentDeck}\r\n              editCardState={editCardState}\r\n              setEditCardState={setEditCardState}\r\n            />\r\n          </Route>\r\n          {/* ADD CARD */}\r\n          <Route path=\"/decks/:deckId/cards/new\">\r\n            <AddCard\r\n              newCard={newCard}\r\n              setNewCard={setNewCard}\r\n              currentDeck={currentDeck}\r\n              setCurrentDeck={setCurrentDeck}\r\n              editCardState={editCardState}\r\n              setEditCardState={setEditCardState}\r\n            />\r\n          </Route>\r\n          {/* NEW DECK */}\r\n          <Route path={`/decks/new`}>\r\n            <CreateDeck\r\n              OnClick={OnClick}\r\n              newDeckObject={newDeckObject}\r\n              setNewDeckObject={setNewDeckObject}\r\n            />\r\n          </Route>\r\n          {/* EDIT DECK */}\r\n          <Route path={`/decks/:deckId/edit`}>\r\n            <EditDeck\r\n              OnClick={OnClick}\r\n              newDeckObject={newDeckObject}\r\n              editCardState={editCardState}\r\n              setEditCardState={setEditCardState}\r\n            />\r\n          </Route>\r\n          {/* STUDY DECK */}\r\n          <Route path={`/decks/:deckId/study`}>\r\n            <Study currentDeck={currentDeck} setCurrentDeck={setCurrentDeck} />\r\n          </Route>\r\n          {/* VIEW DECK */}\r\n          <Route path=\"/decks/:deckId\">\r\n            <ViewDeck\r\n              OnClick={OnClick}\r\n              currentDeck={currentDeck}\r\n              setCurrentDeck={setCurrentDeck}\r\n            />\r\n          </Route>\r\n          {/* NOT FOUND */}\r\n          <Route>\r\n            <NotFound />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Layout;\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Layout from \"./Layout/Layout\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/\">\r\n        <Layout />\r\n      </Route>\r\n    </Switch>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}