{"ast":null,"code":"var _jsxFileName = \"/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/EditCard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { readCard, readDeck, updateCard } from \"../utils/api\";\nimport BreadcrumbBar from \"./BreadcrumbBar\";\nimport CardForm from \"./CardForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EditCard({\n  OnClick,\n  newCard,\n  setNewCard\n}) {\n  _s();\n\n  const params = useParams();\n  const deckId = params.deckId;\n  const cardId = params.cardId;\n  const history = useHistory();\n  const [editCardState, setEditCardState] = useState({\n    //card: { front: \"\", back: \"\" },\n    edit: false\n  });\n  useEffect(() => {\n    readDeck(deckId).then(deck => {\n      setEditCardState({ ...editCardState,\n        edit: true,\n        deckId: deck.id,\n        deckName: deck.name\n      });\n    });\n    readCard(cardId).then(card => setEditCardState({ ...editCardState,\n      front: card.front,\n      back: card.back\n    }));\n  }, []);\n  /*\n    async function loadPage() {\n      const deck = await readDeck(deckId).then((deck) => {\n        //console.log(deck);\n        setEditCardState({\n          ...editCardState,\n          deckId: deck.id,\n          deckName: deck.name,\n          cards: deck.cards,\n          edit: true,\n        });\n      });\n       const card = await readCard(cardId).then((card) => {\n        setEditCardState({\n          ...editCardState,\n          front: card.front,\n          back: card.back,\n          CardId: card.id,\n          edit: true,\n        });\n      });\n    }\n    loadPage();\n  */\n\n  console.log(editCardState);\n\n  const handleChange = event => {\n    if (event.target.parentNode.innerText === \"Front\") {\n      setEditCardState({ ...editCardState,\n        front: event.target.value\n      });\n    }\n\n    if (event.target.parentNode.innerText === \"Back\") {\n      setEditCardState({ ...editCardState,\n        back: event.target.value\n      });\n    }\n  };\n\n  const onCancel = () => {\n    console.log(editCardState.deckName);\n    history.push(`/decks/${deckId}`);\n  };\n\n  const onSubmit = () => {\n    const editedCard = {\n      front: editCardState.front,\n      back: editCardState.back,\n      id: cardId,\n      deckId: deckId\n    };\n    updateCard(editedCard);\n    history.push(`/decks/${deckId}`);\n  };\n\n  if (editCardState.edit) {\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(BreadcrumbBar, {\n        nav1: `Deck ${editCardState.deckName}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"mt-2\",\n        children: \"Edit Card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardForm, {\n        newCard: newCard,\n        setNewCard: setNewCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary mr-2\",\n        id: \"doneEditCard\",\n        onClick: onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        id: \"submitEditCard\",\n        onClick: onSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this);\n  }\n\n  return \"Loading\";\n}\n\n_s(EditCard, \"tRA7LxfWN2Nv7eNCupW54pW8hdM=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = EditCard;\nexport default EditCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditCard\");","map":{"version":3,"sources":["/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/EditCard.jsx"],"names":["React","Fragment","useEffect","useState","useHistory","useParams","readCard","readDeck","updateCard","BreadcrumbBar","CardForm","EditCard","OnClick","newCard","setNewCard","params","deckId","cardId","history","editCardState","setEditCardState","edit","then","deck","id","deckName","name","card","front","back","console","log","handleChange","event","target","parentNode","innerText","value","onCancel","push","onSubmit","editedCard"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { readCard, readDeck, updateCard } from \"../utils/api\";\nimport BreadcrumbBar from \"./BreadcrumbBar\";\nimport CardForm from \"./CardForm\";\n\nfunction EditCard({ OnClick, newCard, setNewCard }) {\n  const params = useParams();\n  const deckId = params.deckId;\n  const cardId = params.cardId;\n  const history = useHistory();\n\n  const [editCardState, setEditCardState] = useState({\n    //card: { front: \"\", back: \"\" },\n    edit: false,\n  });\n\n  useEffect(() => {\n    readDeck(deckId).then((deck) => {\n      setEditCardState({\n        ...editCardState,\n        edit: true,\n        deckId: deck.id,\n        deckName: deck.name,\n      });\n\n\t\t\t\n    });\n\n    readCard(cardId).then((card) =>\n      setEditCardState({\n        ...editCardState,\n        front: card.front,\n        back: card.back,\n      })\n    );\n  }, []);\n\n  /*\n    async function loadPage() {\n      const deck = await readDeck(deckId).then((deck) => {\n        //console.log(deck);\n        setEditCardState({\n          ...editCardState,\n          deckId: deck.id,\n          deckName: deck.name,\n          cards: deck.cards,\n          edit: true,\n        });\n      });\n\n      const card = await readCard(cardId).then((card) => {\n        setEditCardState({\n          ...editCardState,\n          front: card.front,\n          back: card.back,\n          CardId: card.id,\n          edit: true,\n        });\n      });\n    }\n    loadPage();\n*/\n\n  console.log(editCardState);\n\n  const handleChange = (event) => {\n    if (event.target.parentNode.innerText === \"Front\") {\n      setEditCardState({ ...editCardState, front: event.target.value });\n    }\n    if (event.target.parentNode.innerText === \"Back\") {\n      setEditCardState({ ...editCardState, back: event.target.value });\n    }\n  };\n\n  const onCancel = () => {\n    console.log(editCardState.deckName);\n    history.push(`/decks/${deckId}`);\n  };\n\n  const onSubmit = () => {\n    const editedCard = {\n      front: editCardState.front,\n      back: editCardState.back,\n      id: cardId,\n      deckId: deckId,\n    };\n    updateCard(editedCard);\n    history.push(`/decks/${deckId}`);\n  };\n\n  if (editCardState.edit) {\n    return (\n      <Fragment>\n        <BreadcrumbBar nav1={`Deck ${editCardState.deckName}`} />\n        <h2 className=\"mt-2\">Edit Card</h2>\n        <CardForm newCard={newCard} setNewCard={setNewCard} />\n        <button\n          className=\"btn btn-secondary mr-2\"\n          id=\"doneEditCard\"\n          onClick={onCancel}\n        >\n          Cancel\n        </button>\n        <button\n          className=\"btn btn-primary\"\n          id=\"submitEditCard\"\n          onClick={onSubmit}\n        >\n          Submit\n        </button>\n      </Fragment>\n    );\n  }\n  return \"Loading\";\n}\n\nexport default EditCard;\n"]},"metadata":{},"sourceType":"module"}