{"ast":null,"code":"var _jsxFileName = \"/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/DeckList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, Fragment } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { listDecks, deleteDeck } from \"../utils/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DeckList({\n  OnClick,\n  allDecksWithCards,\n  setAllDecksWithCards\n}) {\n  _s();\n\n  const history = useHistory();\n  const newAllDecksArray = Array.from(allDecksWithCards);\n  const listItemDecks = newAllDecksArray.map(deck => createCardForDeck(deck.name, deck.description, deck.id, deck.cards.length));\n  useEffect(() => {\n    async function loadDecksWithCards() {\n      const decks = await listDecks();\n      setAllDecksWithCards(decks);\n    }\n\n    loadDecksWithCards(); //}, [allDecksWithCards]);\n  }, []);\n\n  function deleteDeck(event) {\n    const restart = window.confirm(\"Delete this deck? \\n \\n You will not be able to recover it.\");\n\n    if (restart) {\n      const deckIdToDelete = event.target.parentNode.id;\n      console.log(deckIdToDelete); //deleteDeck(deckIdToDelete);\n\n      /*fetch(`http://localhost:5000/decks/${deckIdToDelete}`, {\n        method: \"DELETE\",\n      });*/\n\n      history.go(0);\n    }\n  }\n\n  function createCardForDeck(name, description, id, cardsNum) {\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"list-group-item\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card border-0\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-body\",\n            id: id,\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"card-title\",\n              children: name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: `${cardsNum} cards`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"card-text\",\n              children: description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              to: \"/\",\n              className: \"btn btn-secondary mr-1\",\n              id: \"viewDeck\",\n              onClick: OnClick,\n              children: \"View\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              to: \"/\",\n              className: \"btn btn-primary mr-1\",\n              id: \"studyDeck\",\n              onClick: OnClick,\n              children: \"Study\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              to: \"/\",\n              className: \"btn btn-danger\",\n              id: \"deleteDeck\",\n              onClick: deleteDeck,\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  }\n\n  const onDelete = event => {\n    const deckIdToDelete = event.target.parentNode.id;\n    console.log();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-group\",\n      children: listItemDecks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DeckList, \"bz2N+u0mX89LO9zOCfVCA9Sa20M=\", false, function () {\n  return [useHistory];\n});\n\n_c = DeckList;\nexport default DeckList;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckList\");","map":{"version":3,"sources":["/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/DeckList.jsx"],"names":["React","useEffect","Fragment","useHistory","listDecks","deleteDeck","DeckList","OnClick","allDecksWithCards","setAllDecksWithCards","history","newAllDecksArray","Array","from","listItemDecks","map","deck","createCardForDeck","name","description","id","cards","length","loadDecksWithCards","decks","event","restart","window","confirm","deckIdToDelete","target","parentNode","console","log","go","cardsNum","onDelete"],"mappings":"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","sourcesContent":["import React, { useEffect, Fragment } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { listDecks, deleteDeck } from \"../utils/api\";\n\nfunction DeckList({ OnClick, allDecksWithCards, setAllDecksWithCards }) {\n  const history = useHistory();\n  const newAllDecksArray = Array.from(allDecksWithCards);\n  const listItemDecks = newAllDecksArray.map((deck) =>\n    createCardForDeck(deck.name, deck.description, deck.id, deck.cards.length)\n  );\n\n  useEffect(() => {\n    async function loadDecksWithCards() {\n      const decks = await listDecks();\n      setAllDecksWithCards(decks);\n    }\n    loadDecksWithCards();\n    //}, [allDecksWithCards]);\n  }, []);\n\n  function deleteDeck(event) {\n    const restart = window.confirm(\n      \"Delete this deck? \\n \\n You will not be able to recover it.\"\n    );\n    if (restart) {\n      const deckIdToDelete = event.target.parentNode.id;\n      console.log(deckIdToDelete);\n      //deleteDeck(deckIdToDelete);\n      /*fetch(`http://localhost:5000/decks/${deckIdToDelete}`, {\n        method: \"DELETE\",\n      });*/\n\n      history.go(0);\n    }\n  }\n\n  function createCardForDeck(name, description, id, cardsNum) {\n    return (\n      <Fragment key={id}>\n        <li className=\"list-group-item\">\n          <div className=\"card border-0\">\n            <div className=\"card-body\" id={id}>\n              <h5 className=\"card-title\">{name}</h5>\n              <p>{`${cardsNum} cards`}</p>\n              <p className=\"card-text\">{description}</p>\n              <button\n                to=\"/\"\n                className=\"btn btn-secondary mr-1\"\n                id=\"viewDeck\"\n                onClick={OnClick}\n              >\n                View\n              </button>\n              <button\n                to=\"/\"\n                className=\"btn btn-primary mr-1\"\n                id=\"studyDeck\"\n                onClick={OnClick}\n              >\n                Study\n              </button>\n              <button\n                to=\"/\"\n                className=\"btn btn-danger\"\n                id=\"deleteDeck\"\n                onClick={deleteDeck}\n              >\n                Delete\n              </button>\n            </div>\n          </div>\n        </li>\n      </Fragment>\n    );\n  }\n\n  const onDelete = (event) => {\n\t\tconst deckIdToDelete = event.target.parentNode.id;\n    console.log()\n  };\n\n  return (\n    <Fragment>\n      <ul className=\"list-group\">{listItemDecks}</ul>\n    </Fragment>\n  );\n}\n\nexport default DeckList;\n"]},"metadata":{},"sourceType":"module"}