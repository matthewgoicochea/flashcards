{"ast":null,"code":"var _jsxFileName = \"/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/Study.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Study({\n  OnClick,\n  currentCardsArray,\n  currentDeck,\n  set\n}) {\n  _s();\n\n  const params = useParams();\n  const deckId = params.deckId;\n  useEffect(() => {\n    async function loadDeck() {\n      const response = await fetch(`http://localhost:5000/decks/${deckId}?_embed=cards`);\n      const deckFromAPI = await response.json();\n      setCurrentDeck(deckFromAPI);\n    }\n\n    loadDeck();\n  }, [deckId]); // check dependency\n\n  const [flipped, setFlipped] = useState(false);\n  const [currentCard, setCurrentCard] = useState(1);\n  const history = useHistory();\n  const cardFront = \"front text\";\n  const cardBack = \"back text\";\n  const totalCards = 1;\n\n  const onFlip = () => {\n    console.log(flipped);\n    setFlipped(prevState => !prevState);\n  };\n\n  const onNext = () => {\n    if (currentCard === totalCards) {\n      const restart = window.confirm(\"Restart cards? \\n \\n Click 'cancel' to return to the home page.\");\n\n      if (restart === true) {\n        setFlipped(false);\n        setCurrentCard(1);\n      } else {\n        history.push(\"/\");\n      }\n    } else {\n      setCurrentCard(prevValue => prevValue + 1);\n      setFlipped(false);\n    }\n  };\n\n  const flipBtn = /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onFlip,\n    className: \"btn btn-secondary\",\n    children: \"Flip\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n\n  const bothBtns = /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onFlip,\n      className: \"btn btn-secondary\",\n      children: \"Flip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onNext,\n      className: \"btn btn-primary\",\n      children: \"Flip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n\n  const card = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"card-title\",\n        children: [\"Card \", currentCard, \" of \", totalCards]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"card-text\",\n        children: flipped ? cardBack : cardFront\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), flipped ? bothBtns : flipBtn]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n\n  const notEnoughCards = /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Not enough cards.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"You need at least 3 cards to study. There\", \" \", totalCards === 1 ? `is ${totalCards} card` : `are ${totalCards} cards`, \" \", \"in this deck.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      id: \"studyAddCard\",\n      onClick: OnClick,\n      children: \"Add Cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Study: Deck Title\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), totalCards < 3 ? notEnoughCards : card]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Study, \"b4ib5EmFpA0BCpIeANSPMmDR0YA=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = Study;\nexport default Study;\n\nvar _c;\n\n$RefreshReg$(_c, \"Study\");","map":{"version":3,"sources":["/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/Study.jsx"],"names":["React","Fragment","useEffect","useState","useHistory","useParams","Study","OnClick","currentCardsArray","currentDeck","set","params","deckId","loadDeck","response","fetch","deckFromAPI","json","setCurrentDeck","flipped","setFlipped","currentCard","setCurrentCard","history","cardFront","cardBack","totalCards","onFlip","console","log","prevState","onNext","restart","window","confirm","push","prevValue","flipBtn","bothBtns","card","notEnoughCards"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,cAAtC;;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,iBAAX;AAA8BC,EAAAA,WAA9B;AAA2CC,EAAAA;AAA3C,CAAf,EAAiE;AAAA;;AAC/D,QAAMC,MAAM,GAAGN,SAAS,EAAxB;AACA,QAAMO,MAAM,GAAGD,MAAM,CAACC,MAAtB;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeW,QAAf,GAA0B;AACxB,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,+BAA8BH,MAAO,eADZ,CAA5B;AAGA,YAAMI,WAAW,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA1B;AACAC,MAAAA,cAAc,CAACF,WAAD,CAAd;AACD;;AACDH,IAAAA,QAAQ;AACT,GATQ,EASN,CAACD,MAAD,CATM,CAAT,CAJ+D,CAc/D;;AAEA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACkB,WAAD,EAAcC,cAAd,IAAgCnB,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAMoB,OAAO,GAAGnB,UAAU,EAA1B;AAEA,QAAMoB,SAAS,GAAG,YAAlB;AACA,QAAMC,QAAQ,GAAG,WAAjB;AACA,QAAMC,UAAU,GAAG,CAAnB;;AAEA,QAAMC,MAAM,GAAG,MAAM;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAYV,OAAZ;AACAC,IAAAA,UAAU,CAAEU,SAAD,IAAe,CAACA,SAAjB,CAAV;AACD,GAHD;;AAKA,QAAMC,MAAM,GAAG,MAAM;AACnB,QAAIV,WAAW,KAAKK,UAApB,EAAgC;AAC9B,YAAMM,OAAO,GAAGC,MAAM,CAACC,OAAP,CACd,iEADc,CAAhB;;AAGA,UAAIF,OAAO,KAAK,IAAhB,EAAsB;AACpBZ,QAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,QAAAA,cAAc,CAAC,CAAD,CAAd;AACD,OAHD,MAGO;AACLC,QAAAA,OAAO,CAACY,IAAR,CAAa,GAAb;AACD;AACF,KAVD,MAUO;AACLb,MAAAA,cAAc,CAAEc,SAAD,IAAeA,SAAS,GAAG,CAA5B,CAAd;AACAhB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GAfD;;AAiBA,QAAMiB,OAAO,gBACX;AAAQ,IAAA,OAAO,EAAEV,MAAjB;AAAyB,IAAA,SAAS,EAAC,mBAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAMA,QAAMW,QAAQ,gBACZ,QAAC,QAAD;AAAA,4BACE;AAAQ,MAAA,OAAO,EAAEX,MAAjB;AAAyB,MAAA,SAAS,EAAC,mBAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAQ,MAAA,OAAO,EAAEI,MAAjB;AAAyB,MAAA,SAAS,EAAC,iBAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAWA,QAAMQ,IAAI,gBACR;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,YAAd;AAAA,4BACQlB,WADR,UACyBK,UADzB;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAG,QAAA,SAAS,EAAC,WAAb;AAAA,kBAA0BP,OAAO,GAAGM,QAAH,GAAcD;AAA/C;AAAA;AAAA;AAAA;AAAA,cAJF,EAKGL,OAAO,GAAGmB,QAAH,GAAcD,OALxB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;;AAYA,QAAMG,cAAc,gBAClB,QAAC,QAAD;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,8DAC4C,GAD5C,EAEGd,UAAU,KAAK,CAAf,GAAoB,MAAKA,UAAW,OAApC,GAA8C,OAAMA,UAAW,QAFlE,EAE2E,GAF3E;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAOE;AAAQ,MAAA,SAAS,EAAC,iBAAlB;AAAoC,MAAA,EAAE,EAAC,cAAvC;AAAsD,MAAA,OAAO,EAAEnB,OAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAcA,sBACE,QAAC,QAAD;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGmB,UAAU,GAAG,CAAb,GAAiBc,cAAjB,GAAkCD,IAFrC;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GA/FQjC,K;UACQD,S,EAiBCD,U;;;KAlBTE,K;AAiGT,eAAeA,KAAf","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\n\nfunction Study({ OnClick, currentCardsArray, currentDeck, set }) {\n  const params = useParams();\n  const deckId = params.deckId;\n\n  useEffect(() => {\n    async function loadDeck() {\n      const response = await fetch(\n        `http://localhost:5000/decks/${deckId}?_embed=cards`\n      );\n      const deckFromAPI = await response.json();\n      setCurrentDeck(deckFromAPI);\n    }\n    loadDeck();\n  }, [deckId]);\n  // check dependency\n\n  const [flipped, setFlipped] = useState(false);\n  const [currentCard, setCurrentCard] = useState(1);\n  const history = useHistory();\n\n  const cardFront = \"front text\";\n  const cardBack = \"back text\";\n  const totalCards = 1;\n\n  const onFlip = () => {\n    console.log(flipped);\n    setFlipped((prevState) => !prevState);\n  };\n\n  const onNext = () => {\n    if (currentCard === totalCards) {\n      const restart = window.confirm(\n        \"Restart cards? \\n \\n Click 'cancel' to return to the home page.\"\n      );\n      if (restart === true) {\n        setFlipped(false);\n        setCurrentCard(1);\n      } else {\n        history.push(\"/\");\n      }\n    } else {\n      setCurrentCard((prevValue) => prevValue + 1);\n      setFlipped(false);\n    }\n  };\n\n  const flipBtn = (\n    <button onClick={onFlip} className=\"btn btn-secondary\">\n      Flip\n    </button>\n  );\n\n  const bothBtns = (\n    <Fragment>\n      <button onClick={onFlip} className=\"btn btn-secondary\">\n        Flip\n      </button>\n      <button onClick={onNext} className=\"btn btn-primary\">\n        Flip\n      </button>\n    </Fragment>\n  );\n\n  const card = (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">\n          Card {currentCard} of {totalCards}\n        </h5>\n        <p className=\"card-text\">{flipped ? cardBack : cardFront}</p>\n        {flipped ? bothBtns : flipBtn}\n      </div>\n    </div>\n  );\n\n  const notEnoughCards = (\n    <Fragment>\n      <h2>Not enough cards.</h2>\n      <p>\n        You need at least 3 cards to study. There{\" \"}\n        {totalCards === 1 ? `is ${totalCards} card` : `are ${totalCards} cards`}{\" \"}\n        in this deck.\n      </p>\n      <button className=\"btn btn-primary\" id=\"studyAddCard\" onClick={OnClick}>\n        Add Cards\n      </button>\n    </Fragment>\n  );\n\n  return (\n    <Fragment>\n      <h1>Study: Deck Title</h1>\n      {totalCards < 3 ? notEnoughCards : card}\n    </Fragment>\n  );\n}\n\nexport default Study;\n"]},"metadata":{},"sourceType":"module"}