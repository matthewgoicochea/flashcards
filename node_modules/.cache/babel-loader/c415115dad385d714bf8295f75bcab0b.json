{"ast":null,"code":"var _jsxFileName = \"/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/Study.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Study({\n  OnClick,\n  currentCardsArray,\n  currentDeck,\n  setCurrentDeck,\n  deckLength,\n  setDeckLength\n}) {\n  _s();\n\n  const params = useParams();\n  const deckId = params.deckId;\n  let totalCards = deckLength;\n  useEffect(() => {\n    async function loadDeck() {\n      const response = await fetch(`http://localhost:5000/decks/${deckId}?_embed=cards`);\n      const deckFromAPI = await response.json();\n      setCurrentDeck(deckFromAPI); //setDeckLength(currentDeck.cards.length);\n    }\n\n    loadDeck(); //}, [deckId, currentDeck]); //this is right but makes computer slow while running server\n  }, [deckId]);\n  console.log(\"HERE\", currentDeck); //finds current \n\n  useEffect(() => {\n    async function loadLength() {\n      const response = await fetch(`http://localhost:5000/deck/${deckId}/cards`);\n      const lengthFromAPI = await response.json();\n      setDeckLength(lengthFromAPI.length);\n    }\n\n    loadLength();\n  }, [deckId]);\n  console.log(deckLength); // check dependency\n\n  const [flipped, setFlipped] = useState(false);\n  const [currentCard, setCurrentCard] = useState(1);\n  const history = useHistory(); //console.log(\"HERE\", currentDeck.cards[0]);\n\n  let cardFront = \"front text\";\n  let cardBack = \"back text\";\n\n  const onFlip = () => {\n    console.log(flipped);\n    setFlipped(prevState => !prevState);\n  };\n\n  const onNext = () => {\n    if (currentCard === totalCards) {\n      const restart = window.confirm(\"Restart cards? \\n \\n Click 'cancel' to return to the home page.\");\n\n      if (restart === true) {\n        setFlipped(false);\n        setCurrentCard(1);\n      } else {\n        history.push(\"/\");\n      }\n    } else {\n      setCurrentCard(prevValue => prevValue + 1);\n      setFlipped(false);\n    }\n  };\n\n  const flipBtn = /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onFlip,\n    className: \"btn btn-secondary\",\n    children: \"Flip\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n\n  const bothBtns = /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onFlip,\n      className: \"btn btn-secondary\",\n      children: \"Flip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onNext,\n      className: \"btn btn-primary\",\n      children: \"Flip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n\n  const card = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"card-title\",\n        children: [\"Card \", currentCard, \" of \", totalCards]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"card-text\",\n        children: flipped ? cardBack : cardFront\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), flipped ? bothBtns : flipBtn]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n\n  const notEnoughCards = /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Not enough cards.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"You need at least 3 cards to study. There\", \" \", totalCards === 1 ? `is ${totalCards} card` : `are ${totalCards} cards`, \" \", \"in this deck.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      id: \"studyAddCard\",\n      onClick: OnClick,\n      children: \"Add Cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Study: Deck Title\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), totalCards < 3 ? notEnoughCards : card]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Study, \"1fwcTiB1vBCSObd8U/c1UGMJgOE=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = Study;\nexport default Study;\n\nvar _c;\n\n$RefreshReg$(_c, \"Study\");","map":{"version":3,"sources":["/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/Study.jsx"],"names":["React","Fragment","useEffect","useState","useHistory","useParams","Study","OnClick","currentCardsArray","currentDeck","setCurrentDeck","deckLength","setDeckLength","params","deckId","totalCards","loadDeck","response","fetch","deckFromAPI","json","console","log","loadLength","lengthFromAPI","length","flipped","setFlipped","currentCard","setCurrentCard","history","cardFront","cardBack","onFlip","prevState","onNext","restart","window","confirm","push","prevValue","flipBtn","bothBtns","card","notEnoughCards"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\n\nfunction Study({\n  OnClick,\n  currentCardsArray,\n  currentDeck,\n  setCurrentDeck,\n  deckLength,\n  setDeckLength,\n}) {\n  const params = useParams();\n  const deckId = params.deckId;\n  let totalCards = deckLength;\n\n  useEffect(() => {\n    async function loadDeck() {\n      const response = await fetch(\n        `http://localhost:5000/decks/${deckId}?_embed=cards`\n      );\n      const deckFromAPI = await response.json();\n      setCurrentDeck(deckFromAPI);\n      //setDeckLength(currentDeck.cards.length);\n    }\n    loadDeck();\n    //}, [deckId, currentDeck]); //this is right but makes computer slow while running server\n  }, [deckId]);\n\n  console.log(\"HERE\", currentDeck);\n\n\t//finds current \n  useEffect(() => {\n    async function loadLength() {\n      const response = await fetch(\n        `http://localhost:5000/deck/${deckId}/cards`\n      );\n      const lengthFromAPI = await response.json();\n      setDeckLength(lengthFromAPI.length);\n    }\n    loadLength();\n  }, [deckId]);\n  console.log(deckLength);\n\n  // check dependency\n  const [flipped, setFlipped] = useState(false);\n  const [currentCard, setCurrentCard] = useState(1);\n\n  const history = useHistory();\n\n  //console.log(\"HERE\", currentDeck.cards[0]);\n\n  let cardFront = \"front text\";\n  let cardBack = \"back text\";\n\n  const onFlip = () => {\n    console.log(flipped);\n    setFlipped((prevState) => !prevState);\n  };\n\n  const onNext = () => {\n    if (currentCard === totalCards) {\n      const restart = window.confirm(\n        \"Restart cards? \\n \\n Click 'cancel' to return to the home page.\"\n      );\n      if (restart === true) {\n        setFlipped(false);\n        setCurrentCard(1);\n      } else {\n        history.push(\"/\");\n      }\n    } else {\n      setCurrentCard((prevValue) => prevValue + 1);\n      setFlipped(false);\n    }\n  };\n\n  const flipBtn = (\n    <button onClick={onFlip} className=\"btn btn-secondary\">\n      Flip\n    </button>\n  );\n\n  const bothBtns = (\n    <Fragment>\n      <button onClick={onFlip} className=\"btn btn-secondary\">\n        Flip\n      </button>\n      <button onClick={onNext} className=\"btn btn-primary\">\n        Flip\n      </button>\n    </Fragment>\n  );\n\n  const card = (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">\n          Card {currentCard} of {totalCards}\n        </h5>\n        <p className=\"card-text\">{flipped ? cardBack : cardFront}</p>\n        {flipped ? bothBtns : flipBtn}\n      </div>\n    </div>\n  );\n\n  const notEnoughCards = (\n    <Fragment>\n      <h2>Not enough cards.</h2>\n      <p>\n        You need at least 3 cards to study. There{\" \"}\n        {totalCards === 1 ? `is ${totalCards} card` : `are ${totalCards} cards`}{\" \"}\n        in this deck.\n      </p>\n      <button className=\"btn btn-primary\" id=\"studyAddCard\" onClick={OnClick}>\n        Add Cards\n      </button>\n    </Fragment>\n  );\n\n  return (\n    <Fragment>\n      <h1>Study: Deck Title</h1>\n      {totalCards < 3 ? notEnoughCards : card}\n    </Fragment>\n  );\n}\n\nexport default Study;\n"]},"metadata":{},"sourceType":"module"}