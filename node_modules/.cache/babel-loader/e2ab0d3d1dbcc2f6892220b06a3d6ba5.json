{"ast":null,"code":"var _jsxFileName = \"/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/EditCard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { readCard, readDeck, updateCard } from \"../utils/api\";\nimport BreadcrumbBar from \"./BreadcrumbBar\";\nimport CardForm from \"./CardForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EditCard({\n  OnClick,\n  newCard,\n  setNewCard\n}) {\n  _s();\n\n  const params = useParams();\n  const deckId = params.deckId;\n  const cardId = params.cardId;\n  const history = useHistory();\n  const [editCardState, setEditCardState] = useState({\n    //card: { front: \"\", back: \"\" },\n    edit: false\n  });\n  useEffect(() => {\n    async function loadPage() {\n      const deck = await readDeck(deckId).then(deck => {\n        //console.log(deck);\n        setEditCardState({ ...editCardState,\n          deckId: deck.id,\n          deckName: deck.name,\n          cards: deck.cards\n        });\n      });\n      const card = await readCard(cardId).then(card => {\n        setEditCardState({ ...editCardState,\n          front: card.front,\n          back: card.back,\n          CardId: card.id\n        });\n      });\n    }\n\n    loadPage();\n  }, []);\n  console.log(editCardState);\n\n  const handleChange = event => {\n    if (event.target.parentNode.innerText === \"Front\") {\n      setEditCardState({ ...editCardState,\n        front: event.target.value\n      });\n    }\n\n    if (event.target.parentNode.innerText === \"Back\") {\n      setEditCardState({ ...editCardState,\n        back: event.target.value\n      });\n    }\n  };\n\n  const onCancel = () => {\n    console.log(editCardState.deckName);\n    history.push(`/decks/${deckId}`);\n  };\n\n  const onSubmit = () => {\n    const editedCard = {\n      front: editCardState.front,\n      back: editCardState.back,\n      id: cardId,\n      deckId: deckId\n    };\n    updateCard(editedCard);\n    history.push(`/decks/${deckId}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(BreadcrumbBar, {\n      nav1: `Deck ${editCardState.deckName}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"mt-2\",\n      children: \"Edit Card\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardForm, {\n      newCard: newCard,\n      setNewCard: setNewCard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-secondary mr-2\",\n      id: \"doneEditCard\",\n      onClick: onCancel,\n      children: \"Cancel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      id: \"submitEditCard\",\n      onClick: onSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EditCard, \"CPxassRFhN89muULuGO8Lo62gB0=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = EditCard;\nexport default EditCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditCard\");","map":{"version":3,"sources":["/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/EditCard.jsx"],"names":["React","Fragment","useEffect","useState","useHistory","useParams","readCard","readDeck","updateCard","BreadcrumbBar","CardForm","EditCard","OnClick","newCard","setNewCard","params","deckId","cardId","history","editCardState","setEditCardState","edit","loadPage","deck","then","id","deckName","name","cards","card","front","back","CardId","console","log","handleChange","event","target","parentNode","innerText","value","onCancel","push","onSubmit","editedCard"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { readCard, readDeck, updateCard } from \"../utils/api\";\nimport BreadcrumbBar from \"./BreadcrumbBar\";\nimport CardForm from \"./CardForm\";\n\nfunction EditCard({ OnClick, newCard, setNewCard }) {\n  const params = useParams();\n  const deckId = params.deckId;\n  const cardId = params.cardId;\n  const history = useHistory();\n\n  const [editCardState, setEditCardState] = useState({\n    //card: { front: \"\", back: \"\" },\n    edit: false\n  });\n\n  useEffect(() => {\n    async function loadPage() {\n      const deck = await readDeck(deckId).then((deck) => {\n        //console.log(deck);\n        setEditCardState({\n          ...editCardState,\n          deckId: deck.id,\n          deckName: deck.name,\n          cards: deck.cards,\n        });\n      });\n\n      const card = await readCard(cardId).then((card) => {\n        setEditCardState({\n          ...editCardState,\n          front: card.front,\n          back: card.back,\n          CardId: card.id,\n        });\n      });\n    }\n    loadPage();\n  }, []);\n\n  console.log(editCardState);\n\n  const handleChange = (event) => {\n    if (event.target.parentNode.innerText === \"Front\") {\n      setEditCardState({ ...editCardState, front: event.target.value });\n    }\n    if (event.target.parentNode.innerText === \"Back\") {\n      setEditCardState({ ...editCardState, back: event.target.value });\n    }\n  };\n\n  const onCancel = () => {\n    console.log(editCardState.deckName);\n    history.push(`/decks/${deckId}`);\n  };\n\n  const onSubmit = () => {\n    const editedCard = {\n      front: editCardState.front,\n      back: editCardState.back,\n      id: cardId,\n      deckId: deckId,\n    };\n    updateCard(editedCard);\n    history.push(`/decks/${deckId}`);\n  };\n\n  return (\n    <Fragment>\n      <BreadcrumbBar nav1={`Deck ${editCardState.deckName}`} />\n      <h2 className=\"mt-2\">Edit Card</h2>\n      <CardForm newCard={newCard} setNewCard={setNewCard} />\n      <button\n        className=\"btn btn-secondary mr-2\"\n        id=\"doneEditCard\"\n        onClick={onCancel}\n      >\n        Cancel\n      </button>\n      <button\n        className=\"btn btn-primary\"\n        id=\"submitEditCard\"\n        onClick={onSubmit}\n      >\n        Submit\n      </button>\n    </Fragment>\n  );\n}\n\nexport default EditCard;\n"]},"metadata":{},"sourceType":"module"}