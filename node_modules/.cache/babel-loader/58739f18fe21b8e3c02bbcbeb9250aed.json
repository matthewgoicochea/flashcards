{"ast":null,"code":"var _jsxFileName = \"/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { Route, Switch, useHistory, useParams, useRouteMatch } from \"react-router-dom\";\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport Home from \"./Home\";\nimport CreateDeck from \"./CreateDeck\";\nimport DeckList from \"./DeckList\"; //import NewDeck from \"./NewDeck\";\n\nimport Study from \"./Study\";\nimport NavBar from \"./NavBar\";\nimport CurrentDeck from \"./CurrentDeck\";\nimport EditDeck from \"./EditDeck\";\nimport AddCard from \"./AddCard\";\nimport EditCard from \"./EditCard\"; //import TestDeck from \"./TestDeck\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Layout() {\n  _s();\n\n  /*\n  const deckKey = `${Math.floor(Math.random() * 10)}${Math.floor(\n    Math.random() * 10\n  )}${Math.floor(Math.random() * 10)}${Math.floor(Math.random() * 10)}`;\n  */\n  const [newDeckName, setNewDeckName] = useState(\"\");\n  const [newDeckDescription, setNewDeckDescription] = useState(\"\");\n  const [allDecksWithCards, setAllDecksWithCards] = useState({});\n  const [currentDeck, setCurrentDeck] = useState({});\n  const [currentCardsArray, setCurrentCardsArray] = useState({});\n  const [deckLength, setDeckLength] = useState(0);\n  const [newDeckObject, setNewDeckObject] = useState({\n    name: \"\",\n    description: \"\"\n  });\n  const history = useHistory();\n\n  const handleSubmit = event => {\n    setNewDeckObject({\n      name: newDeckName,\n      description: newDeckDescription\n    }); // console.log(newDeckObject);\n  };\n\n  const handleDelete = event => {\n    const deckIdToDelete = event.target.parentNode.id; //all decks w cards\n  };\n\n  const [temp, setTemp] = useState();\n  useEffect(() => {\n    async function loadTemp() {\n      //const toDelete = handleDelete();\n      //console.log(\"HERE:\", toDelete);\n      const response = await fetch(`http://localhost:5000/decks`);\n      const decksTempAPI = await response.json();\n      const newTemp = decksTempAPI.map(deck => deck.id); //console.log(decksTempAPI);\n      //setTemp(decksTempAPI);\n    }\n\n    loadTemp();\n  }, []); //\n  //make request for all decks to replace with old plus new stuff\n\n  /*useEffect(() => {\n    const data = { ...allDecks, newDeckObject };\n    fetch(`http://localhost:5000/decks`, {\n      method: \"POST\", // or 'PUT'\n      body: JSON.stringify(data),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(\"Success:\", data);\n      })\n      .catch((error) => {\n        console.error(\"Error:\", error);\n      });\n  }, [newDeckObject]);*/\n  //console.log(allDecks);\n\n  const [decksToPop, setDecksToPop] = useState({});\n  useEffect(() => {\n    async function loadDecks() {\n      const response = await fetch(`http://localhost:5000/decks`);\n      const decksFromAPI = await response.json();\n      setDecksToPop(decksFromAPI);\n    }\n\n    loadDecks();\n    console.log(\"result\", decksToPop);\n  }, []);\n\n  async function popDeck() {\n    //look at current decks and pop last one\n    //console.log(\"HERE\");\n    const response = await fetch(`http://localhost:5000/decks`);\n    const result = decksToPop.pop();\n  }\n\n  const OnClick = event => {\n    const btnType = event.target.id;\n    const deckId = event.target.parentNode.id;\n    console.log(btnType);\n\n    if (btnType === \"popDeck\") {\n      popDeck();\n    }\n\n    if (btnType === \"createDeck\") {}\n\n    if (btnType === \"viewDeck\") {\n      history.push(`/decks/${deckId}`);\n    }\n\n    if (btnType === \"studyDeck\") {\n      history.push(`/decks/${deckId ? deckId : currentDeck.id}/study`);\n    }\n\n    if (btnType === \"deleteDeck\") {\n      handleDelete(event);\n    }\n\n    if (btnType === \"cancelCreateDeck\") {\n      history.push(\"/\");\n    }\n\n    if (btnType === \"submitCreateDeck\") {\n      // take values and make put request\n      handleSubmit(event);\n    }\n\n    if (btnType === \"addCards\") {\n      history.push(`/decks/${deckId ? deckId : currentDeck.id}/cards/new`);\n    }\n\n    if (btnType === \"editDeck\") {\n      history.push(\"/decks/:deckId/edit\");\n    }\n\n    if (btnType === \"cancelEditDeck\") {\n      history.push(\"/decks/:deckId/\");\n    }\n\n    if (btnType === \"doneAddCard\") {\n      history.push(\"/decks/:deckId/\");\n    }\n\n    if (btnType === \"saveAddCard\") {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          children: [/*#__PURE__*/_jsxDEV(Home, {\n            OnClick: OnClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DeckList, {\n            OnClick: OnClick,\n            allDecksWithCards: allDecksWithCards,\n            setAllDecksWithCards: setAllDecksWithCards\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/new\",\n          children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CreateDeck, {\n            OnClick: OnClick,\n            newDeckName: newDeckName,\n            setNewDeckName: setNewDeckName,\n            newDeckDescription: newDeckDescription,\n            setNewDeckDescription: setNewDeckDescription,\n            newDeckObject: newDeckObject\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/:deckId/cards/:cardId/edit\",\n          children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(EditCard, {\n            OnClick: OnClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/:deckId/edit\",\n          children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(EditDeck, {\n            OnClick: OnClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/:deckId/study\",\n          children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Study, {\n            OnClick: OnClick,\n            setCurrentDeck: setCurrentDeck,\n            deckLength: deckLength,\n            setDeckLength: setDeckLength\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/:deckId/cards/new\",\n          children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AddCard, {\n            OnClick: OnClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/:deckId\",\n          children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CurrentDeck, {\n            OnClick: OnClick,\n            currentDeck: currentDeck,\n            currentCardsArray: currentCardsArray,\n            setCurrentDeck: setCurrentDeck,\n            setCurrentCardsArray: setCurrentCardsArray\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          children: /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Layout, \"pKGr+RNCn2I5VXhFaljyIqUFa1U=\", false, function () {\n  return [useHistory];\n});\n\n_c = Layout;\nexport default Layout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Layout\");","map":{"version":3,"sources":["/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/index.js"],"names":["React","Fragment","useEffect","useState","Route","Switch","useHistory","useParams","useRouteMatch","Header","NotFound","Home","CreateDeck","DeckList","Study","NavBar","CurrentDeck","EditDeck","AddCard","EditCard","Layout","newDeckName","setNewDeckName","newDeckDescription","setNewDeckDescription","allDecksWithCards","setAllDecksWithCards","currentDeck","setCurrentDeck","currentCardsArray","setCurrentCardsArray","deckLength","setDeckLength","newDeckObject","setNewDeckObject","name","description","history","handleSubmit","event","handleDelete","deckIdToDelete","target","parentNode","id","temp","setTemp","loadTemp","response","fetch","decksTempAPI","json","newTemp","map","deck","decksToPop","setDecksToPop","loadDecks","decksFromAPI","console","log","popDeck","result","pop","OnClick","btnType","deckId","push"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport {\n  Route,\n  Switch,\n  useHistory,\n  useParams,\n  useRouteMatch,\n} from \"react-router-dom\";\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport Home from \"./Home\";\nimport CreateDeck from \"./CreateDeck\";\nimport DeckList from \"./DeckList\";\n//import NewDeck from \"./NewDeck\";\nimport Study from \"./Study\";\nimport NavBar from \"./NavBar\";\nimport CurrentDeck from \"./CurrentDeck\";\nimport EditDeck from \"./EditDeck\";\nimport AddCard from \"./AddCard\";\nimport EditCard from \"./EditCard\";\n//import TestDeck from \"./TestDeck\";\n\nfunction Layout() {\n  /*\n  const deckKey = `${Math.floor(Math.random() * 10)}${Math.floor(\n    Math.random() * 10\n  )}${Math.floor(Math.random() * 10)}${Math.floor(Math.random() * 10)}`;\n*/\n  const [newDeckName, setNewDeckName] = useState(\"\");\n  const [newDeckDescription, setNewDeckDescription] = useState(\"\");\n  const [allDecksWithCards, setAllDecksWithCards] = useState({});\n  const [currentDeck, setCurrentDeck] = useState({});\n  const [currentCardsArray, setCurrentCardsArray] = useState({});\n  const [deckLength, setDeckLength] = useState(0);\n  const [newDeckObject, setNewDeckObject] = useState({\n    name: \"\",\n    description: \"\",\n  });\n  const history = useHistory();\n\n  const handleSubmit = (event) => {\n    setNewDeckObject({ name: newDeckName, description: newDeckDescription });\n    // console.log(newDeckObject);\n  };\n\n  const handleDelete = (event) => {\n    const deckIdToDelete = event.target.parentNode.id;\n    //all decks w cards\n  };\n\n  const [temp, setTemp] = useState();\n\n  useEffect(() => {\n    async function loadTemp() {\n      //const toDelete = handleDelete();\n      //console.log(\"HERE:\", toDelete);\n      const response = await fetch(`http://localhost:5000/decks`);\n      const decksTempAPI = await response.json();\n      const newTemp = decksTempAPI.map((deck) => deck.id);\n      //console.log(decksTempAPI);\n      //setTemp(decksTempAPI);\n    }\n    loadTemp();\n  }, []);\n\n  //\n  //make request for all decks to replace with old plus new stuff\n  /*useEffect(() => {\n    const data = { ...allDecks, newDeckObject };\n    fetch(`http://localhost:5000/decks`, {\n      method: \"POST\", // or 'PUT'\n      body: JSON.stringify(data),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(\"Success:\", data);\n      })\n      .catch((error) => {\n        console.error(\"Error:\", error);\n      });\n  }, [newDeckObject]);*/\n  //console.log(allDecks);\n\n  const [decksToPop, setDecksToPop] = useState({});\n  useEffect(() => {\n    async function loadDecks() {\n      const response = await fetch(`http://localhost:5000/decks`);\n      const decksFromAPI = await response.json();\n      setDecksToPop(decksFromAPI);\n    }\n    loadDecks();\n    console.log(\"result\", decksToPop);\n  }, []);\n\n  async function popDeck() {\n    //look at current decks and pop last one\n    //console.log(\"HERE\");\n\t\tconst response = await fetch(`http://localhost:5000/decks`);\n\t\tconst result = decksToPop.pop()\n    \n\n  }\n\n  const OnClick = (event) => {\n    const btnType = event.target.id;\n    const deckId = event.target.parentNode.id;\n\n    console.log(btnType);\n    if (btnType === \"popDeck\") {\n      popDeck();\n    }\n    if (btnType === \"createDeck\") {\n    }\n    if (btnType === \"viewDeck\") {\n      history.push(`/decks/${deckId}`);\n    }\n    if (btnType === \"studyDeck\") {\n      history.push(`/decks/${deckId ? deckId : currentDeck.id}/study`);\n    }\n    if (btnType === \"deleteDeck\") {\n      handleDelete(event);\n    }\n    if (btnType === \"cancelCreateDeck\") {\n      history.push(\"/\");\n    }\n    if (btnType === \"submitCreateDeck\") {\n      // take values and make put request\n      handleSubmit(event);\n    }\n    if (btnType === \"addCards\") {\n      history.push(`/decks/${deckId ? deckId : currentDeck.id}/cards/new`);\n    }\n    if (btnType === \"editDeck\") {\n      history.push(\"/decks/:deckId/edit\");\n    }\n    if (btnType === \"cancelEditDeck\") {\n      history.push(\"/decks/:deckId/\");\n    }\n    if (btnType === \"doneAddCard\") {\n      history.push(\"/decks/:deckId/\");\n    }\n    if (btnType === \"saveAddCard\") {\n    }\n  };\n\n  return (\n    <Fragment>\n      <Header />\n      <div className=\"container\">\n        {/* TODO: Implement the screen starting here */}\n        <Switch>\n          <Route exact={true} path=\"/\">\n            <Home OnClick={OnClick} />\n            <DeckList\n              OnClick={OnClick}\n              allDecksWithCards={allDecksWithCards}\n              setAllDecksWithCards={setAllDecksWithCards}\n            />\n          </Route>\n          <Route path=\"/decks/new\">\n            <NavBar />\n            <CreateDeck\n              OnClick={OnClick}\n              newDeckName={newDeckName}\n              setNewDeckName={setNewDeckName}\n              newDeckDescription={newDeckDescription}\n              setNewDeckDescription={setNewDeckDescription}\n              newDeckObject={newDeckObject}\n            />\n          </Route>\n\n          <Route path=\"/decks/:deckId/cards/:cardId/edit\">\n            <NavBar />\n            <EditCard OnClick={OnClick} />\n          </Route>\n          <Route path=\"/decks/:deckId/edit\">\n            <NavBar />\n            <EditDeck OnClick={OnClick} />\n          </Route>\n          <Route path=\"/decks/:deckId/study\">\n            <NavBar />\n            <Study\n              OnClick={OnClick}\n              setCurrentDeck={setCurrentDeck}\n              deckLength={deckLength}\n              setDeckLength={setDeckLength}\n            />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/new\">\n            <NavBar />\n            <AddCard OnClick={OnClick} />\n          </Route>\n          <Route path=\"/decks/:deckId\">\n            <NavBar />\n            <CurrentDeck\n              OnClick={OnClick}\n              currentDeck={currentDeck}\n              currentCardsArray={currentCardsArray}\n              setCurrentDeck={setCurrentDeck}\n              setCurrentCardsArray={setCurrentCardsArray}\n            />\n          </Route>\n\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Layout;\n"]},"metadata":{},"sourceType":"module"}