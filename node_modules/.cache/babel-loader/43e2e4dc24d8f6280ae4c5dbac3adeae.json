{"ast":null,"code":"var _jsxFileName = \"/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/Study.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { readCard, readDeck } from \"../utils/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Study({\n  currentDeck,\n  setCurrentDeck\n}) {\n  _s();\n\n  const params = useParams();\n  const deckId = params.deckId; //const [front, setFront] = useState(\"front\");\n  //const [cardNumber, setCardNumber] = useState(0);\n  //const [cards, setCards] = useState([]);\n  //const [cardsArray, setCardsArray] = useState();\n  //console.log(cardsArray[0].front);\n\n  useEffect(() => {\n    readDeck(deckId).then(deck => {\n      //setCardsArray(Array.from(deck.cards));\n      setCurrentDeck({\n        id: deck.id,\n        name: deck.name,\n        description: deck.description,\n        cards: [deck.cards],\n        cardNumber: 0,\n        flipped: false\n      });\n    });\n  }, []);\n\n  const onFlip = () => {};\n\n  const onNext = () => {};\n\n  const flipBtn = /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onFlip,\n    className: \"btn btn-secondary\",\n    children: \"Flip\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n\n  const bothBtns = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onFlip,\n      id: \"flipFront\",\n      className: \"btn btn-secondary\",\n      children: \"Flip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onNext,\n      id: \"flipNext\",\n      className: \"btn btn-primary\",\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n\n  const studyCard = (number, total, front, back) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"card-title\",\n        children: [\"Card \", number, \" of \", total]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: front\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: back\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), true ? bothBtns : flipBtn]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n\n  if (currentDeck.study) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Study: \", currentDeck.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), studyCard(currentDeck.cardNumber + 1, currentDeck.cards[0].length, currentDeck.cards[0][currentDeck.cardNumber].front, currentDeck.cards[0][currentDeck.cardNumber].back)]\n    }, void 0, true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 10\n  }, this);\n}\n\n_s(Study, \"oVl/CosACDqoQXSsHMBk26cu/Mw=\", false, function () {\n  return [useParams];\n});\n\n_c = Study;\nexport default Study;\n/*\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { readDeck } from \"../utils/api\";\nimport NavBar from \"./NavBar\";\n\nfunction Study({ OnClick, studyState, setStudyState, currentDeck }) {\n  const params = useParams();\n  const deckId = params.deckId;\n  const history = useHistory();\n\n  const [studyCards, setStudyCards] = useState({});\n  //const front = studyCards.length == 0 ? studyCards[0].front : \"loading\";\n  const [front, setFront] = useState(\"loading front...\");\n\n  useEffect(() => {\n    const deck = readDeck(deckId);\n    deck.then((deck) => {\n      setStudyState({\n        ...studyState,\n        deckId: deck.id,\n        cards: deck.cards,\n        name: deck.name,\n        description: deck.description,\n        deckLength: deck.cards.length,\n        cardNumber: 0,\n        front: deck.cards[studyState.cardNumber].front,\n        back: deck.cards[studyState.cardNumber].back,\n      });\n      setStudyCards(deck.cards);\n    });\n  }, []);\n\n  const onFlip = () => {\n    setStudyState({ ...studyState, flipped: !studyState.flipped });\n  };\n\n  const onNext = () => {\n    if (studyState.cardNumber + 1 === studyState.deckLength) {\n      const restart = window.confirm(\n        \"Restart cards? \\n \\n Click 'cancel' to return to the home page.\"\n      );\n      if (restart) {\n        history.go(0);\n      } else {\n        history.push(\"/\");\n      }\n    }\n    console.log(studyState.cardNumber);\n    setStudyState({\n      ...studyState,\n      cardNumber: studyState.cardNumber + 1,\n      flipped: false,\n      front: studyState.cards[studyState.cardNumber].front,\n      back: studyState.cards[studyState.cardNumber].back,\n    });\n  };\n\n  const flipBtn = (\n    <button onClick={onFlip} className=\"btn btn-secondary\">\n      Flip\n    </button>\n  );\n\n  const bothBtns = (\n    <Fragment>\n      <button onClick={onFlip} id=\"flipFront\" className=\"btn btn-secondary\">\n        Flip\n      </button>\n      <button onClick={onNext} id=\"flipNext\" className=\"btn btn-primary\">\n        Next\n      </button>\n    </Fragment>\n  );\n\n  const studyCard = (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">\n          Card {studyState.cardNumber + 1} of {studyState.deckLength}\n        </h5>\n        <p>{studyState.flipped ? studyState.back : studyState.front}</p>\n        {studyState.flipped ? bothBtns : flipBtn}\n      </div>\n    </div>\n  );\n\n  const notEnoughCards = (num) => {\n    let message = \"init\";\n    if (num === 1) {\n      message = \"There is 1 card in this deck.\";\n    } else {\n      message = `There are ${num} cards in this deck.`;\n    }\n    return (\n      <Fragment>\n        <h2>Not enough cards.</h2>\n        <p>You need at least 3 cards to study. {message}</p>\n        <Link\n          to={`/decks/${deckId}/cards/new`}\n          className=\"btn btn-primary\"\n          id=\"addCards\"\n        >\n          Add Cards\n        </Link>\n      </Fragment>\n    );\n  };\n  return (\n    <Fragment>\n      <NavBar OnClick={OnClick} deckName={studyState.name} />\n      <h1>Study: {studyState.name ? studyState.name : \"...loading\"}</h1>\n      {studyState.deckLength < 3\n        ? notEnoughCards(studyState.deckLength)\n        : studyCard}\n    </Fragment>\n  );\n}\n\nexport default Study;\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"Study\");","map":{"version":3,"sources":["/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/Study.jsx"],"names":["React","useEffect","useState","useParams","readCard","readDeck","Study","currentDeck","setCurrentDeck","params","deckId","then","deck","id","name","description","cards","cardNumber","flipped","onFlip","onNext","flipBtn","bothBtns","studyCard","number","total","front","back","study","length"],"mappings":"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":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { readCard, readDeck } from \"../utils/api\";\n\nfunction Study({ currentDeck, setCurrentDeck }) {\n  const params = useParams();\n  const deckId = params.deckId;\n  //const [front, setFront] = useState(\"front\");\n  //const [cardNumber, setCardNumber] = useState(0);\n  //const [cards, setCards] = useState([]);\n  //const [cardsArray, setCardsArray] = useState();\n  //console.log(cardsArray[0].front);\n\n  useEffect(() => {\n    readDeck(deckId).then((deck) => {\n      //setCardsArray(Array.from(deck.cards));\n      setCurrentDeck({\n        id: deck.id,\n        name: deck.name,\n        description: deck.description,\n        cards: [deck.cards],\n        cardNumber: 0,\n        flipped: false,\n      });\n    });\n  }, []);\n\n  const onFlip = () => {};\n  const onNext = () => {};\n\n  const flipBtn = (\n    <button onClick={onFlip} className=\"btn btn-secondary\">\n      Flip\n    </button>\n  );\n\n  const bothBtns = (\n    <>\n      <button onClick={onFlip} id=\"flipFront\" className=\"btn btn-secondary\">\n        Flip\n      </button>\n      <button onClick={onNext} id=\"flipNext\" className=\"btn btn-primary\">\n        Next\n      </button>\n    </>\n  );\n\n  const studyCard = (number, total, front, back) => (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">\n          Card {number} of {total}\n        </h5>\n        <p>{front}</p>\n        <p>{back}</p>\n        {true ? bothBtns : flipBtn}\n      </div>\n    </div>\n  );\n\n  if (currentDeck.study) {\n    return (\n      <>\n        <h1>Study: {currentDeck.name}</h1>\n        {studyCard(\n          currentDeck.cardNumber + 1,\n          currentDeck.cards[0].length,\n          currentDeck.cards[0][currentDeck.cardNumber].front,\n          currentDeck.cards[0][currentDeck.cardNumber].back\n        )}\n      </>\n    );\n  }\n\n  return <h1>Loading</h1>;\n}\n\nexport default Study;\n\n/*\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { readDeck } from \"../utils/api\";\nimport NavBar from \"./NavBar\";\n\nfunction Study({ OnClick, studyState, setStudyState, currentDeck }) {\n  const params = useParams();\n  const deckId = params.deckId;\n  const history = useHistory();\n\n  const [studyCards, setStudyCards] = useState({});\n  //const front = studyCards.length == 0 ? studyCards[0].front : \"loading\";\n  const [front, setFront] = useState(\"loading front...\");\n\n  useEffect(() => {\n    const deck = readDeck(deckId);\n    deck.then((deck) => {\n      setStudyState({\n        ...studyState,\n        deckId: deck.id,\n        cards: deck.cards,\n        name: deck.name,\n        description: deck.description,\n        deckLength: deck.cards.length,\n        cardNumber: 0,\n        front: deck.cards[studyState.cardNumber].front,\n        back: deck.cards[studyState.cardNumber].back,\n      });\n      setStudyCards(deck.cards);\n    });\n  }, []);\n\n  const onFlip = () => {\n    setStudyState({ ...studyState, flipped: !studyState.flipped });\n  };\n\n  const onNext = () => {\n    if (studyState.cardNumber + 1 === studyState.deckLength) {\n      const restart = window.confirm(\n        \"Restart cards? \\n \\n Click 'cancel' to return to the home page.\"\n      );\n      if (restart) {\n        history.go(0);\n      } else {\n        history.push(\"/\");\n      }\n    }\n    console.log(studyState.cardNumber);\n    setStudyState({\n      ...studyState,\n      cardNumber: studyState.cardNumber + 1,\n      flipped: false,\n      front: studyState.cards[studyState.cardNumber].front,\n      back: studyState.cards[studyState.cardNumber].back,\n    });\n  };\n\n  const flipBtn = (\n    <button onClick={onFlip} className=\"btn btn-secondary\">\n      Flip\n    </button>\n  );\n\n  const bothBtns = (\n    <Fragment>\n      <button onClick={onFlip} id=\"flipFront\" className=\"btn btn-secondary\">\n        Flip\n      </button>\n      <button onClick={onNext} id=\"flipNext\" className=\"btn btn-primary\">\n        Next\n      </button>\n    </Fragment>\n  );\n\n  const studyCard = (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">\n          Card {studyState.cardNumber + 1} of {studyState.deckLength}\n        </h5>\n        <p>{studyState.flipped ? studyState.back : studyState.front}</p>\n        {studyState.flipped ? bothBtns : flipBtn}\n      </div>\n    </div>\n  );\n\n  const notEnoughCards = (num) => {\n    let message = \"init\";\n    if (num === 1) {\n      message = \"There is 1 card in this deck.\";\n    } else {\n      message = `There are ${num} cards in this deck.`;\n    }\n    return (\n      <Fragment>\n        <h2>Not enough cards.</h2>\n        <p>You need at least 3 cards to study. {message}</p>\n        <Link\n          to={`/decks/${deckId}/cards/new`}\n          className=\"btn btn-primary\"\n          id=\"addCards\"\n        >\n          Add Cards\n        </Link>\n      </Fragment>\n    );\n  };\n  return (\n    <Fragment>\n      <NavBar OnClick={OnClick} deckName={studyState.name} />\n      <h1>Study: {studyState.name ? studyState.name : \"...loading\"}</h1>\n      {studyState.deckLength < 3\n        ? notEnoughCards(studyState.deckLength)\n        : studyCard}\n    </Fragment>\n  );\n}\n\nexport default Study;\n*/\n"]},"metadata":{},"sourceType":"module"}