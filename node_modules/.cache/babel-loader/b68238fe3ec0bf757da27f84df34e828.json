{"ast":null,"code":"var _jsxFileName = \"/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState } from \"react\";\nimport { Route, Switch, useHistory } from \"react-router-dom\";\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport Home from \"./Home\";\nimport CreateDeck from \"./CreateDeck\";\nimport DeckList from \"./DeckList\";\nimport Study from \"./Study\";\nimport NavBar from \"./NavBar\";\nimport CurrentDeck from \"./CurrentDeck\";\nimport EditDeck from \"./EditDeck\";\nimport AddCard from \"./AddCard\";\nimport EditCard from \"./EditCard\";\nimport { createCard, createDeck, deleteDeck } from \"../utils/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Layout() {\n  _s();\n\n  const [allDecks, setAllDecks] = useState({});\n  const [currentDeck, setCurrentDeck] = useState({});\n  const [currentDeckId, setCurrentDeckId] = useState(0); //\n\n  const [newDeckName, setNewDeckName] = useState(\"\");\n  const [newDeckDescription, setNewDeckDescription] = useState(\"\");\n  const [newDeckObject, setNewDeckObject] = useState({\n    name: \"\",\n    description: \"\"\n  }); //\n\n  const [currentCardsArray, setCurrentCardsArray] = useState({});\n  const [newCard, setNewCard] = useState({\n    front: \"\",\n    back: \"\"\n  }); //\n\n  const [studyDeck, setStudyDeck] = useState(false);\n  const [studyState, setStudyState] = useState({\n    studyCardNum: 0,\n    flipped: false,\n    cards: {}\n  }); //\n\n  const history = useHistory(); //const [decks, setDecks] = useState({});\n\n  const handleSetDeck = id => {\n    setCurrentDeckId(id);\n  };\n\n  const OnClick = event => {\n    const btnType = event.target.id;\n    const deckId = event.target.parentNode.id;\n    console.log(btnType, deckId);\n\n    if (btnType === \"viewDeck\") {\n      setCurrentDeckId(deckId);\n      history.push(`/decks/${deckId}`);\n    }\n\n    if (btnType === \"studyDeck\") {\n      handleSetDeck(deckId);\n      history.push(`/decks/${deckId ? deckId : currentDeck.id}/study`);\n    }\n\n    if (btnType === \"deleteDeck\") {\n      const restart = window.confirm(\"Delete this deck? \\n \\n You will not be able to recover it.\");\n\n      if (restart) {\n        deleteDeck(deckId);\n        history.go(\"/\");\n        history.push(\"/\");\n      }\n    }\n\n    if (btnType === \"cancelCreateDeck\") {\n      history.push(\"/\");\n    }\n\n    if (btnType === \"submitCreateDeck\") {\n      setNewDeckObject({\n        name: newDeckName,\n        description: newDeckDescription\n      });\n      createDeck(newDeckObject);\n      history.push(\"/\");\n    }\n\n    if (btnType === \"addCards\") {\n      history.push(`/decks/${deckId ? deckId : currentDeck.id}/cards/new`);\n    }\n\n    if (btnType === \"deleteCard\") {\n      const restart = window.confirm(\"Delete this card? \\n \\n You will not be able to recover it.\");\n\n      if (restart) {\n        deleteDeck(deckId);\n        history.go(\"/\");\n        history.push(\"/\");\n      }\n    }\n\n    if (btnType === \"editDeck\") {\n      history.push(`/decks/${deckId ? deckId : currentDeck.id}/edit/`);\n    }\n\n    if (btnType === \"cancelEditDeck\") {\n      history.push(`/decks/${deckId ? deckId : currentDeck.id}/`);\n    }\n\n    if (btnType === \"editCard\") {\n      handleSetDeck(deckId);\n      history.push(`/decks/${deckId ? deckId : currentDeckId}/cards/:cardId/edit`);\n    }\n\n    if (btnType === \"doneAddCard\") {\n      history.push(\"/decks/:deckId/\");\n    }\n\n    if (btnType === \"saveAddCard\") {\n      createCard(currentDeck.id, newCard);\n      history.push(`/decks/${currentDeck.id}`);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          children: [/*#__PURE__*/_jsxDEV(Home, {\n            OnClick: OnClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DeckList, {\n            OnClick: OnClick,\n            allDecksWithCards: allDecks,\n            setAllDecksWithCards: setAllDecks\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/new\",\n          children: [/*#__PURE__*/_jsxDEV(NavBar, {\n            OnClick: OnClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CreateDeck, {\n            OnClick: OnClick,\n            newDeckName: newDeckName,\n            setNewDeckName: setNewDeckName,\n            newDeckDescription: newDeckDescription,\n            setNewDeckDescription: setNewDeckDescription,\n            newDeckObject: newDeckObject,\n            setNewDeckObject: setNewDeckObject\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/:deckId/cards/:cardId/edit\",\n          children: [/*#__PURE__*/_jsxDEV(NavBar, {\n            OnClick: OnClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(EditCard, {\n            OnClick: OnClick,\n            currentDeckId: currentDeckId //editState={editState}\n            //setEditState={setEditState}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/:deckId/edit\",\n          children: [/*#__PURE__*/_jsxDEV(NavBar, {\n            OnClick: OnClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(EditDeck, {\n            OnClick: OnClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/:deckId/study\",\n          children: [/*#__PURE__*/_jsxDEV(NavBar, {\n            OnClick: OnClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Study, {\n            studyDeck: studyDeck,\n            setStudyDeck: setStudyDeck,\n            studyState: studyState,\n            setStudyState: setStudyState\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/:deckId/cards/new\",\n          children: [/*#__PURE__*/_jsxDEV(NavBar, {\n            OnClick: OnClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AddCard, {\n            OnClick: OnClick,\n            newCard: newCard,\n            setNewCard: setNewCard,\n            currentDeck: currentDeck\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/:deckId\",\n          children: [/*#__PURE__*/_jsxDEV(NavBar, {\n            OnClick: OnClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CurrentDeck, {\n            OnClick: OnClick,\n            currentDeck: currentDeck,\n            currentCardsArray: currentCardsArray,\n            setCurrentDeck: setCurrentDeck,\n            setCurrentCardsArray: setCurrentCardsArray\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          children: /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Layout, \"l6sXWW4+GOR4S87XtozV4bwvLV8=\", false, function () {\n  return [useHistory];\n});\n\n_c = Layout;\nexport default Layout; //load decks\n\n/*useEffect(() => {\n    const abortController = new AbortController();\n    async function loadDecks() {\n      try {\n        const response = await fetch(`http://localhost:5000/decks`, {\n          signal: abortController.signal,\n        });\n        const decksFromAPI = await response.json();\n        setDecks(decksFromAPI);\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          console.log(\"Aborted loadDecks\");\n        } else {\n          throw error;\n        }\n      }\n    }\n    loadDecks();\n\n    return () => abortController.abort();\n    //}, [decks]);\n  }, []);*/\n//old study\n\n/**\n * <Study\n              OnClick={OnClick}\n              setCurrentDeck={setCurrentDeck}\n              currentDeck={currentDeck}\n              // currentCardsArray={currentCardsArray}\n              // allDecksWithCards={allDecksWithCards}\n              deckLength={deckLength}\n              // setDeckLength={setDeckLength}\n              currentDeckId={currentDeckId}\n            />\n */\n\n/*const handleSubmit = (event) => {\n    //console.log(\"name:\", newDeckName, \"desc\", newDeckDescription);\n    setNewDeckObject({ name: newDeckName, description: newDeckDescription });\n    createDeck(newDeckObject);\n  };*/\n\n/*const handleDelete = (event) => {\n    const deckIdToDelete = event.target.parentNode.id;\n    deleteDeck(deckIdToDelete);\n    history.go(\"/\");\n  };*/\n\nvar _c;\n\n$RefreshReg$(_c, \"Layout\");","map":{"version":3,"sources":["/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/index.js"],"names":["React","Fragment","useState","Route","Switch","useHistory","Header","NotFound","Home","CreateDeck","DeckList","Study","NavBar","CurrentDeck","EditDeck","AddCard","EditCard","createCard","createDeck","deleteDeck","Layout","allDecks","setAllDecks","currentDeck","setCurrentDeck","currentDeckId","setCurrentDeckId","newDeckName","setNewDeckName","newDeckDescription","setNewDeckDescription","newDeckObject","setNewDeckObject","name","description","currentCardsArray","setCurrentCardsArray","newCard","setNewCard","front","back","studyDeck","setStudyDeck","studyState","setStudyState","studyCardNum","flipped","cards","history","handleSetDeck","id","OnClick","event","btnType","target","deckId","parentNode","console","log","push","restart","window","confirm","go"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from \"react\";\nimport { Route, Switch, useHistory } from \"react-router-dom\";\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport Home from \"./Home\";\nimport CreateDeck from \"./CreateDeck\";\nimport DeckList from \"./DeckList\";\nimport Study from \"./Study\";\nimport NavBar from \"./NavBar\";\nimport CurrentDeck from \"./CurrentDeck\";\nimport EditDeck from \"./EditDeck\";\nimport AddCard from \"./AddCard\";\nimport EditCard from \"./EditCard\";\nimport { createCard, createDeck, deleteDeck } from \"../utils/api\";\n\nfunction Layout() {\n  const [allDecks, setAllDecks] = useState({});\n  const [currentDeck, setCurrentDeck] = useState({});\n  const [currentDeckId, setCurrentDeckId] = useState(0);\n  //\n  const [newDeckName, setNewDeckName] = useState(\"\");\n  const [newDeckDescription, setNewDeckDescription] = useState(\"\");\n\n  const [newDeckObject, setNewDeckObject] = useState({\n    name: \"\",\n    description: \"\",\n  });\n  //\n  const [currentCardsArray, setCurrentCardsArray] = useState({});\n  const [newCard, setNewCard] = useState({ front: \"\", back: \"\" });\n  //\n  const [studyDeck, setStudyDeck] = useState(false);\n  const [studyState, setStudyState] = useState({\n    studyCardNum: 0,\n    flipped: false,\n    cards: {},\n  });\n  //\n\n  const history = useHistory();\n  //const [decks, setDecks] = useState({});\n\n  const handleSetDeck = (id) => {\n    setCurrentDeckId(id);\n  };\n\n  const OnClick = (event) => {\n    const btnType = event.target.id;\n    const deckId = event.target.parentNode.id;\n    console.log(btnType, deckId);\n    if (btnType === \"viewDeck\") {\n      setCurrentDeckId(deckId);\n      history.push(`/decks/${deckId}`);\n    }\n    if (btnType === \"studyDeck\") {\n      handleSetDeck(deckId);\n      history.push(`/decks/${deckId ? deckId : currentDeck.id}/study`);\n    }\n    if (btnType === \"deleteDeck\") {\n      const restart = window.confirm(\n        \"Delete this deck? \\n \\n You will not be able to recover it.\"\n      );\n      if (restart) {\n        deleteDeck(deckId);\n        history.go(\"/\");\n        history.push(\"/\");\n      }\n    }\n    if (btnType === \"cancelCreateDeck\") {\n      history.push(\"/\");\n    }\n    if (btnType === \"submitCreateDeck\") {\n      setNewDeckObject({ name: newDeckName, description: newDeckDescription });\n      createDeck(newDeckObject);\n      history.push(\"/\");\n    }\n    if (btnType === \"addCards\") {\n      history.push(`/decks/${deckId ? deckId : currentDeck.id}/cards/new`);\n    }\n    if (btnType === \"deleteCard\") {\n      const restart = window.confirm(\n        \"Delete this card? \\n \\n You will not be able to recover it.\"\n      );\n      if (restart) {\n        deleteDeck(deckId);\n        history.go(\"/\");\n        history.push(\"/\");\n      }\n    }\n    if (btnType === \"editDeck\") {\n      history.push(`/decks/${deckId ? deckId : currentDeck.id}/edit/`);\n    }\n    if (btnType === \"cancelEditDeck\") {\n      history.push(`/decks/${deckId ? deckId : currentDeck.id}/`);\n    }\n    if (btnType === \"editCard\") {\n      handleSetDeck(deckId);\n      history.push(\n        `/decks/${deckId ? deckId : currentDeckId}/cards/:cardId/edit`\n      );\n    }\n    if (btnType === \"doneAddCard\") {\n      history.push(\"/decks/:deckId/\");\n    }\n    if (btnType === \"saveAddCard\") {\n      createCard(currentDeck.id, newCard);\n      history.push(`/decks/${currentDeck.id}`);\n    }\n  };\n\n  return (\n    <Fragment>\n      <Header />\n      <div className=\"container\">\n        {/* TODO: Implement the screen starting here */}\n        <Switch>\n          {/* HOME */}\n          <Route exact={true} path=\"/\">\n            <Home OnClick={OnClick} />\n            <DeckList\n              OnClick={OnClick}\n              allDecksWithCards={allDecks}\n              setAllDecksWithCards={setAllDecks}\n            />\n          </Route>\n          {/* NEW DECK */}\n          <Route path=\"/decks/new\">\n            <NavBar OnClick={OnClick} />\n            <CreateDeck\n              OnClick={OnClick}\n              newDeckName={newDeckName}\n              setNewDeckName={setNewDeckName}\n              newDeckDescription={newDeckDescription}\n              setNewDeckDescription={setNewDeckDescription}\n              newDeckObject={newDeckObject}\n              setNewDeckObject={setNewDeckObject}\n            />\n          </Route>\n          {/* EDIT CARD */}\n          <Route path=\"/decks/:deckId/cards/:cardId/edit\">\n            <NavBar OnClick={OnClick} />\n            <EditCard\n              OnClick={OnClick}\n              currentDeckId={currentDeckId}\n              //editState={editState}\n              //setEditState={setEditState}\n            />\n          </Route>\n          {/* EDIT DECK */}\n          <Route path=\"/decks/:deckId/edit\">\n            <NavBar OnClick={OnClick} />\n            <EditDeck OnClick={OnClick} />\n          </Route>\n          {/* STUDY DECK */}\n          <Route path=\"/decks/:deckId/study\">\n            <NavBar OnClick={OnClick} />\n            <Study\n              studyDeck={studyDeck}\n              setStudyDeck={setStudyDeck}\n              studyState={studyState}\n              setStudyState={setStudyState}\n            />\n          </Route>\n          {/* ADD CARD */}\n          <Route path=\"/decks/:deckId/cards/new\">\n            <NavBar OnClick={OnClick} />\n            <AddCard\n              OnClick={OnClick}\n              newCard={newCard}\n              setNewCard={setNewCard}\n              currentDeck={currentDeck}\n            />\n          </Route>\n          {/* VIEW DECK */}\n          <Route path=\"/decks/:deckId\">\n            <NavBar OnClick={OnClick} />\n            <CurrentDeck\n              OnClick={OnClick}\n              currentDeck={currentDeck}\n              currentCardsArray={currentCardsArray}\n              setCurrentDeck={setCurrentDeck}\n              setCurrentCardsArray={setCurrentCardsArray}\n            />\n          </Route>\n          {/* NOT FOUND */}\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Layout;\n\n//load decks\n/*useEffect(() => {\n    const abortController = new AbortController();\n    async function loadDecks() {\n      try {\n        const response = await fetch(`http://localhost:5000/decks`, {\n          signal: abortController.signal,\n        });\n        const decksFromAPI = await response.json();\n        setDecks(decksFromAPI);\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          console.log(\"Aborted loadDecks\");\n        } else {\n          throw error;\n        }\n      }\n    }\n    loadDecks();\n\n    return () => abortController.abort();\n    //}, [decks]);\n  }, []);*/\n\n//old study\n/**\n * <Study\n              OnClick={OnClick}\n              setCurrentDeck={setCurrentDeck}\n              currentDeck={currentDeck}\n              // currentCardsArray={currentCardsArray}\n              // allDecksWithCards={allDecksWithCards}\n              deckLength={deckLength}\n              // setDeckLength={setDeckLength}\n              currentDeckId={currentDeckId}\n            />\n */\n\n/*const handleSubmit = (event) => {\n    //console.log(\"name:\", newDeckName, \"desc\", newDeckDescription);\n    setNewDeckObject({ name: newDeckName, description: newDeckDescription });\n    createDeck(newDeckObject);\n  };*/\n\n/*const handleDelete = (event) => {\n    const deckIdToDelete = event.target.parentNode.id;\n    deleteDeck(deckIdToDelete);\n    history.go(\"/\");\n  };*/\n"]},"metadata":{},"sourceType":"module"}