{"ast":null,"code":"var _jsxFileName = \"/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/Study.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { listCards, readDeck } from \"../utils/api\";\nimport NavBar from \"./NavBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Study({\n  OnClick\n}) {\n  _s();\n\n  const params = useParams();\n  const deckId = params.deckId;\n  const history = useHistory();\n  const [studyState, setStudyState] = useState({\n    deckId: 0,\n    cards: null,\n    cardNumber: 0,\n    flipped: false,\n    name: null,\n    description: null,\n    deckLength: 0\n  });\n  let front = \"loading...\";\n  let back = \"loading...\";\n  useEffect(() => {\n    const deck = readDeck(deckId);\n    deck.then(deck => {\n      setStudyState({ ...studyState,\n        deckId: deck.id,\n        cards: deck.cards,\n        name: deck.name,\n        description: deck.description,\n        deckLength: deck.cards.length\n      });\n    });\n    front = studyState.cards ? studyState.cards[studyState.cardNumber].front : \"loading...\";\n    back = studyState.cards ? studyState.cards[studyState.cardNumber].back : \"loading...\";\n  }, []);\n\n  const onFlip = () => {\n    setStudyState({ ...studyState,\n      flipped: !studyState.flipped\n    });\n  };\n\n  const onNext = () => {\n    if (studyState.cardNumber + 1 === studyState.deckLength) {\n      const restart = window.confirm(\"Restart cards? \\n \\n Click 'cancel' to return to the home page.\");\n\n      if (restart) {\n        history.go(0);\n      } else {\n        history.push(\"/\");\n      }\n    }\n\n    setStudyState({ ...studyState,\n      cardNumber: studyState.cardNumber + 1,\n      flipped: false\n    });\n  };\n  /*\n  const front = studyState.cards\n    ? studyState.cards[studyState.cardNumber].front\n    : \"loading...\";\n   const back = studyState.cards\n    ? studyState.cards[studyState.cardNumber].back\n    : \"loading...\";\n  */\n\n\n  const flipBtn = /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onFlip,\n    className: \"btn btn-secondary\",\n    children: \"Flip\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n\n  const bothBtns = /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onFlip,\n      id: \"flipFront\",\n      className: \"btn btn-secondary\",\n      children: \"Flip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onNext,\n      id: \"flipBack\",\n      className: \"btn btn-primary\",\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n\n  const studyCard = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"card-title\",\n        children: [\"Card \", studyState.cardNumber + 1, \" of \", studyState.deckLength]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: studyState.flipped ? back : front\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), studyState.flipped ? bothBtns : flipBtn]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n\n  const notEnoughCards = /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Not enough cards.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"You need at least 3 cards to study. There\", \" \", studyState.deckLength === 1 ? \"is 1 card.\" : \"are 2 cards.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {\n      OnClick: OnClick,\n      path: studyState.name,\n      deckId: deckId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Study: \", studyState.name ? studyState.name : \"...loading\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), studyState.deckLength < 3 ? notEnoughCards : studyCard]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Study, \"EPXjablW3PsJ3lkbRRdKOGXqjnI=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = Study;\nexport default Study; //}{\" \"} //      in this deck. //  </p> //<button className=\"btn btn-primary\" id=\"addCards\" onClick={OnClick}> //Add Cards // </button> //</Fragment> //); //const path = \"TESTING\";\n//const deckLength = studyDeck ? studyState.cards.length : 0; //\"...loading\";\n//const temp = readDeck(deckId).then((response) => setStudyDeck(response));\n//console.log(temp);\n\n/*\n  useEffect(() => {\n    async function loadDeck() {\n      const response = await fetch(\n        `http://localhost:5000/decks/${deckId}?_embed=cards`\n      );\n      const deck = await response.json();\n      setStudyDeck(deck.cards);\n      setStudyState({ ...studyState, cards: deck.cards, name: deck.name });\n    }\n    loadDeck();\n    console.log(deckLength);\n  }, []);\n\n  const onFlip = () => {\n    setStudyState({ ...studyState, flipped: !studyState.flipped });\n  };\n\n  const onNext = () => {\n    if (studyState.studyCardNum + 1 === deckLength) {\n      const restart = window.confirm(\n        \"Restart cards? \\n \\n Click 'cancel' to return to the home page.\"\n      );\n      if (restart) {\n        setStudyState({\n          ...studyState,\n          studyCardNum: 0,\n          flipped: false,\n        });\n      } else {\n        history.push(\"/\");\n      }\n    } else {\n      setStudyState({\n        ...studyState,\n        flipped: false,\n        studyCardNum: studyState.studyCardNum + 1,\n      });\n    }\n  };\n\n  const flipBtn = (\n    <button onClick={onFlip} className=\"btn btn-secondary\">\n      Flip\n    </button>\n  );\n\n  const bothBtns = (\n    <Fragment>\n      <button onClick={onFlip} id=\"flipFront\" className=\"btn btn-secondary\">\n        Flip\n      </button>\n      <button onClick={onNext} id=\"flipBack\" className=\"btn btn-primary\">\n        Next\n      </button>\n    </Fragment>\n  );\n\n  const front = studyDeck\n    ? studyDeck[studyState.studyCardNum].front\n    : \"loading...\";\n\n  const back = studyDeck\n    ? studyDeck[studyState.studyCardNum].back\n    : \"loading...\";\n\n  const studyCard = (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">\n          Card {studyState.studyCardNum + 1} of {deckLength}\n        </h5>\n        <p className=\"card-text\">{studyState.flipped ? back : front}</p>\n        {studyState.flipped ? bothBtns : flipBtn}\n      </div>\n    </div>\n  );*/\n\n/*\n  const notEnoughCards = (\n    <Fragment>\n      <h2>Not enough cards.</h2>\n      <p>\n        You need at least 3 cards to study. There{\" \"}\n        {/*deckLength === 1 ? `is ${deckLength} card` : `are ${deckLength} cards`*/\n//\texport default Study;\n\n/***\n * \n * \n *   return (\n    <Fragment>\n      <NavBar OnClick={OnClick} path={studyState.name} />\n      <h1>Study: {studyDeck ? studyState.name : \"...loading\"}</h1>\n      {/*studyState.studyCardNum <= deckLength ? studyCard : \"...loading\"*/\n//}\n// {/*deckLength >= 3 ? studyCard : notEnoughCards*/}\n//\t</Fragment>\n//\t\t);\n//*/\n\n/*\n  const [studyDeck, setStudyDeck] = useState(false);\n  const [studyState, setStudyState] = useState({\n    studyCardNum: 0,\n    flipped: false,\n    cards: {},\n  });*/\n\nvar _c;\n\n$RefreshReg$(_c, \"Study\");","map":{"version":3,"sources":["/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/Study.jsx"],"names":["React","Fragment","useEffect","useState","useHistory","useParams","listCards","readDeck","NavBar","Study","OnClick","params","deckId","history","studyState","setStudyState","cards","cardNumber","flipped","name","description","deckLength","front","back","deck","then","id","length","onFlip","onNext","restart","window","confirm","go","push","flipBtn","bothBtns","studyCard","notEnoughCards"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { listCards, readDeck } from \"../utils/api\";\nimport NavBar from \"./NavBar\";\n\nfunction Study({ OnClick }) {\n  const params = useParams();\n  const deckId = params.deckId;\n  const history = useHistory();\n\n  const [studyState, setStudyState] = useState({\n    deckId: 0,\n    cards: null,\n    cardNumber: 0,\n    flipped: false,\n    name: null,\n    description: null,\n    deckLength: 0,\n  });\n\n  let front = \"loading...\";\n  let back = \"loading...\";\n\n  useEffect(() => {\n    const deck = readDeck(deckId);\n    deck.then((deck) => {\n      setStudyState({\n        ...studyState,\n        deckId: deck.id,\n        cards: deck.cards,\n        name: deck.name,\n        description: deck.description,\n        deckLength: deck.cards.length,\n      });\n    });\n\n    front = studyState.cards\n      ? studyState.cards[studyState.cardNumber].front\n      : \"loading...\";\n    back = studyState.cards\n      ? studyState.cards[studyState.cardNumber].back\n      : \"loading...\";\n  }, []);\n\n  const onFlip = () => {\n    setStudyState({ ...studyState, flipped: !studyState.flipped });\n  };\n\n  const onNext = () => {\n    if (studyState.cardNumber + 1 === studyState.deckLength) {\n      const restart = window.confirm(\n        \"Restart cards? \\n \\n Click 'cancel' to return to the home page.\"\n      );\n      if (restart) {\n        history.go(0);\n      } else {\n        history.push(\"/\");\n      }\n    }\n    setStudyState({\n      ...studyState,\n      cardNumber: studyState.cardNumber + 1,\n      flipped: false,\n    });\n  };\n  /*\n  const front = studyState.cards\n    ? studyState.cards[studyState.cardNumber].front\n    : \"loading...\";\n\n  const back = studyState.cards\n    ? studyState.cards[studyState.cardNumber].back\n    : \"loading...\";\n*/\n  const flipBtn = (\n    <button onClick={onFlip} className=\"btn btn-secondary\">\n      Flip\n    </button>\n  );\n\n  const bothBtns = (\n    <Fragment>\n      <button onClick={onFlip} id=\"flipFront\" className=\"btn btn-secondary\">\n        Flip\n      </button>\n      <button onClick={onNext} id=\"flipBack\" className=\"btn btn-primary\">\n        Next\n      </button>\n    </Fragment>\n  );\n\n  const studyCard = (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">\n          Card {studyState.cardNumber + 1} of {studyState.deckLength}\n        </h5>\n        <p>{studyState.flipped ? back : front}</p>\n        {studyState.flipped ? bothBtns : flipBtn}\n      </div>\n    </div>\n  );\n\n  const notEnoughCards = (\n    <Fragment>\n      <h2>Not enough cards.</h2>\n      <p>\n        You need at least 3 cards to study. There{\" \"}\n        {studyState.deckLength === 1 ? \"is 1 card.\" : \"are 2 cards.\"}\n      </p>\n    </Fragment>\n  );\n\n  return (\n    <Fragment>\n      <NavBar OnClick={OnClick} path={studyState.name} deckId={deckId} />\n      <h1>Study: {studyState.name ? studyState.name : \"...loading\"}</h1>\n      {studyState.deckLength < 3 ? notEnoughCards : studyCard}\n    </Fragment>\n  );\n}\n\nexport default Study;\n\n//}{\" \"} //      in this deck. //  </p> //<button className=\"btn btn-primary\" id=\"addCards\" onClick={OnClick}> //Add Cards // </button> //</Fragment> //); //const path = \"TESTING\";\n\n//const deckLength = studyDeck ? studyState.cards.length : 0; //\"...loading\";\n\n//const temp = readDeck(deckId).then((response) => setStudyDeck(response));\n//console.log(temp);\n\n/*\n  useEffect(() => {\n    async function loadDeck() {\n      const response = await fetch(\n        `http://localhost:5000/decks/${deckId}?_embed=cards`\n      );\n      const deck = await response.json();\n      setStudyDeck(deck.cards);\n      setStudyState({ ...studyState, cards: deck.cards, name: deck.name });\n    }\n    loadDeck();\n    console.log(deckLength);\n  }, []);\n\n  const onFlip = () => {\n    setStudyState({ ...studyState, flipped: !studyState.flipped });\n  };\n\n  const onNext = () => {\n    if (studyState.studyCardNum + 1 === deckLength) {\n      const restart = window.confirm(\n        \"Restart cards? \\n \\n Click 'cancel' to return to the home page.\"\n      );\n      if (restart) {\n        setStudyState({\n          ...studyState,\n          studyCardNum: 0,\n          flipped: false,\n        });\n      } else {\n        history.push(\"/\");\n      }\n    } else {\n      setStudyState({\n        ...studyState,\n        flipped: false,\n        studyCardNum: studyState.studyCardNum + 1,\n      });\n    }\n  };\n\n  const flipBtn = (\n    <button onClick={onFlip} className=\"btn btn-secondary\">\n      Flip\n    </button>\n  );\n\n  const bothBtns = (\n    <Fragment>\n      <button onClick={onFlip} id=\"flipFront\" className=\"btn btn-secondary\">\n        Flip\n      </button>\n      <button onClick={onNext} id=\"flipBack\" className=\"btn btn-primary\">\n        Next\n      </button>\n    </Fragment>\n  );\n\n  const front = studyDeck\n    ? studyDeck[studyState.studyCardNum].front\n    : \"loading...\";\n\n  const back = studyDeck\n    ? studyDeck[studyState.studyCardNum].back\n    : \"loading...\";\n\n  const studyCard = (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">\n          Card {studyState.studyCardNum + 1} of {deckLength}\n        </h5>\n        <p className=\"card-text\">{studyState.flipped ? back : front}</p>\n        {studyState.flipped ? bothBtns : flipBtn}\n      </div>\n    </div>\n  );*/\n/*\n  const notEnoughCards = (\n    <Fragment>\n      <h2>Not enough cards.</h2>\n      <p>\n        You need at least 3 cards to study. There{\" \"}\n        {/*deckLength === 1 ? `is ${deckLength} card` : `are ${deckLength} cards`*/\n//\texport default Study;\n\n/***\n * \n * \n *   return (\n    <Fragment>\n      <NavBar OnClick={OnClick} path={studyState.name} />\n      <h1>Study: {studyDeck ? studyState.name : \"...loading\"}</h1>\n      {/*studyState.studyCardNum <= deckLength ? studyCard : \"...loading\"*/ //}\n// {/*deckLength >= 3 ? studyCard : notEnoughCards*/}\n//\t</Fragment>\n//\t\t);\n//*/\n\n/*\n  const [studyDeck, setStudyDeck] = useState(false);\n  const [studyState, setStudyState] = useState({\n    studyCardNum: 0,\n    flipped: false,\n    cards: {},\n  });*/\n"]},"metadata":{},"sourceType":"module"}