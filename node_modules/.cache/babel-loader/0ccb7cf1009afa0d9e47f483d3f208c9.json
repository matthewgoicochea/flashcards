{"ast":null,"code":"var _jsxFileName = \"/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/Study.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport NavBar from \"./NavBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Study({\n  studyDeck,\n  setStudyDeck,\n  studyState,\n  setStudyState,\n  OnClick\n}) {\n  _s();\n\n  const params = useParams();\n  const deckId = params.deckId;\n  const history = useHistory();\n  const deckLength = studyDeck ? studyState.cards.length : 0; //\"...loading\";\n\n  console.log(\"test\", deckId);\n  /*\n  useEffect(() => {\n    async function loadDeck() {\n      const response = await fetch(\n        `http://localhost:5000/decks/${deckId}?_embed=cards`\n      );\n      const deck = await response.json();\n      setStudyDeck(deck.cards);\n      setStudyState({ ...studyState, cards: deck.cards, name: deck.name });\n    }\n    loadDeck();\n    console.log(deckLength);\n  }, []);*/\n\n  const onFlip = () => {\n    setStudyState({ ...studyState,\n      flipped: !studyState.flipped\n    });\n  };\n\n  const onNext = () => {\n    if (studyState.studyCardNum + 1 === deckLength) {\n      const restart = window.confirm(\"Restart cards? \\n \\n Click 'cancel' to return to the home page.\");\n\n      if (restart) {\n        setStudyState({ ...studyState,\n          studyCardNum: 0,\n          flipped: false\n        });\n      } else {\n        history.push(\"/\");\n      }\n    } else {\n      setStudyState({ ...studyState,\n        flipped: false,\n        studyCardNum: studyState.studyCardNum + 1\n      });\n    }\n  };\n\n  const flipBtn = /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onFlip,\n    className: \"btn btn-secondary\",\n    children: \"Flip\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n\n  const bothBtns = /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onFlip,\n      id: \"flipFront\",\n      className: \"btn btn-secondary\",\n      children: \"Flip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onNext,\n      id: \"flipBack\",\n      className: \"btn btn-primary\",\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n\n  const front = studyDeck ? studyDeck[studyState.studyCardNum].front : \"loading...\";\n  const back = studyDeck ? studyDeck[studyState.studyCardNum].back : \"loading...\";\n\n  const studyCard = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"card-title\",\n        children: [\"Card \", studyState.studyCardNum + 1, \" of \", deckLength]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"card-text\",\n        children: studyState.flipped ? back : front\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), studyState.flipped ? bothBtns : flipBtn]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n\n  const notEnoughCards = /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Not enough cards.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"You need at least 3 cards to study. There\", \" \", \" \", \"in this deck.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      id: \"addCards\",\n      onClick: OnClick,\n      children: \"Add Cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n\n  const path = \"TESTING\";\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {\n      OnClick: OnClick,\n      path: studyState.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Study: \", studyDeck ? studyState.name : \"...loading\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), deckLength >= 3 ? studyCard : notEnoughCards]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Study, \"5Yg6uag+s4vtgA+cdVZxLbUcCA0=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = Study;\nexport default Study;\n/*\n  const [studyDeck, setStudyDeck] = useState(false);\n  const [studyState, setStudyState] = useState({\n    studyCardNum: 0,\n    flipped: false,\n    cards: {},\n  });*/\n\nvar _c;\n\n$RefreshReg$(_c, \"Study\");","map":{"version":3,"sources":["/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/Study.jsx"],"names":["React","Fragment","useEffect","useHistory","useParams","NavBar","Study","studyDeck","setStudyDeck","studyState","setStudyState","OnClick","params","deckId","history","deckLength","cards","length","console","log","onFlip","flipped","onNext","studyCardNum","restart","window","confirm","push","flipBtn","bothBtns","front","back","studyCard","notEnoughCards","path","name"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport NavBar from \"./NavBar\";\n\nfunction Study({\n  studyDeck,\n  setStudyDeck,\n  studyState,\n  setStudyState,\n  OnClick,\n}) {\n  const params = useParams();\n  const deckId = params.deckId;\n  const history = useHistory();\n\n  const deckLength = studyDeck ? studyState.cards.length : 0; //\"...loading\";\n\n  console.log(\"test\", deckId);\n\n  /*\n  useEffect(() => {\n    async function loadDeck() {\n      const response = await fetch(\n        `http://localhost:5000/decks/${deckId}?_embed=cards`\n      );\n      const deck = await response.json();\n      setStudyDeck(deck.cards);\n      setStudyState({ ...studyState, cards: deck.cards, name: deck.name });\n    }\n    loadDeck();\n    console.log(deckLength);\n  }, []);*/\n\n  const onFlip = () => {\n    setStudyState({ ...studyState, flipped: !studyState.flipped });\n  };\n\n  const onNext = () => {\n    if (studyState.studyCardNum + 1 === deckLength) {\n      const restart = window.confirm(\n        \"Restart cards? \\n \\n Click 'cancel' to return to the home page.\"\n      );\n      if (restart) {\n        setStudyState({\n          ...studyState,\n          studyCardNum: 0,\n          flipped: false,\n        });\n      } else {\n        history.push(\"/\");\n      }\n    } else {\n      setStudyState({\n        ...studyState,\n        flipped: false,\n        studyCardNum: studyState.studyCardNum + 1,\n      });\n    }\n  };\n\n  const flipBtn = (\n    <button onClick={onFlip} className=\"btn btn-secondary\">\n      Flip\n    </button>\n  );\n\n  const bothBtns = (\n    <Fragment>\n      <button onClick={onFlip} id=\"flipFront\" className=\"btn btn-secondary\">\n        Flip\n      </button>\n      <button onClick={onNext} id=\"flipBack\" className=\"btn btn-primary\">\n        Next\n      </button>\n    </Fragment>\n  );\n\n  const front = studyDeck\n    ? studyDeck[studyState.studyCardNum].front\n    : \"loading...\";\n\n  const back = studyDeck\n    ? studyDeck[studyState.studyCardNum].back\n    : \"loading...\";\n\n  const studyCard = (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">\n          Card {studyState.studyCardNum + 1} of {deckLength}\n        </h5>\n        <p className=\"card-text\">{studyState.flipped ? back : front}</p>\n        {studyState.flipped ? bothBtns : flipBtn}\n      </div>\n    </div>\n  );\n\n  const notEnoughCards = (\n    <Fragment>\n      <h2>Not enough cards.</h2>\n      <p>\n        You need at least 3 cards to study. There{\" \"}\n        {/*deckLength === 1 ? `is ${deckLength} card` : `are ${deckLength} cards`*/}{\" \"}\n        in this deck.\n      </p>\n      <button className=\"btn btn-primary\" id=\"addCards\" onClick={OnClick}>\n        Add Cards\n      </button>\n    </Fragment>\n  );\n\n  const path = \"TESTING\";\n\n  return (\n    <Fragment>\n      <NavBar OnClick={OnClick} path={studyState.name} />\n      <h1>Study: {studyDeck ? studyState.name : \"...loading\"}</h1>\n      {/*studyState.studyCardNum <= deckLength ? studyCard : \"...loading\"*/}\n      {deckLength >= 3 ? studyCard : notEnoughCards}\n    </Fragment>\n  );\n}\n\nexport default Study;\n\n/*\n  const [studyDeck, setStudyDeck] = useState(false);\n  const [studyState, setStudyState] = useState({\n    studyCardNum: 0,\n    flipped: false,\n    cards: {},\n  });*/\n"]},"metadata":{},"sourceType":"module"}