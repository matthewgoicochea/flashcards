{"ast":null,"code":"var _jsxFileName = \"/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState } from \"react\";\nimport { Route, Switch, useHistory } from \"react-router-dom\";\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport Home from \"./Home\";\nimport CreateDeck from \"./CreateDeck\";\nimport DeckList from \"./DeckList\";\nimport Study from \"./Study\";\nimport NavBar from \"./NavBar\";\nimport CurrentDeck from \"./CurrentDeck\";\nimport EditDeck from \"./EditDeck\";\nimport AddCard from \"./AddCard\";\nimport EditCard from \"./EditCard\";\nimport { createCard, createDeck, deleteDeck } from \"../utils/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Layout() {\n  _s();\n\n  const [allDecks, setAllDecks] = useState({});\n  const [currentDeck, setCurrentDeck] = useState({}); //\n\n  const [currentCardsArray, setCurrentCardsArray] = useState({});\n  const [newDeckObject, setNewDeckObject] = useState({\n    name: \"\",\n    description: \"\"\n  });\n  const [newCard, setNewCard] = useState({\n    front: \"\",\n    back: \"\"\n  });\n  const history = useHistory(); //const [decks, setDecks] = useState({});\n\n  const [deckLength, setDeckLength] = useState(0);\n  const [currentDeckId, setCurrentDeckId] = useState(0);\n\n  const handleSetDeck = id => {\n    setCurrentDeckId(id);\n  };\n\n  const OnClick = event => {\n    const btnType = event.target.id;\n    const deckId = event.target.parentNode.id;\n    console.log(btnType, deckId);\n\n    if (btnType === \"viewDeck\") {\n      history.push(`/decks/${deckId}`);\n      console.log(currentDeck);\n    }\n\n    if (btnType === \"studyDeck\") {\n      handleSetDeck(deckId);\n      history.push(`/decks/${deckId ? deckId : currentDeck.id}/study`);\n    }\n\n    if (btnType === \"deleteDeck\") {\n      deleteDeck(deckId);\n      history.go(\"/\");\n    }\n\n    if (btnType === \"cancelCreateDeck\") {\n      history.push(\"/\");\n    }\n\n    if (btnType === \"submitCreateDeck\") {\n      //      handleSubmit(event);\n      setNewDeckObject({\n        name: newDeckName,\n        description: newDeckDescription\n      });\n      createDeck(newDeckObject);\n      history.push(\"/\");\n    }\n\n    if (btnType === \"addCards\") {\n      history.push(`/decks/${deckId ? deckId : currentDeck.id}/cards/new`);\n    }\n\n    if (btnType === \"editDeck\") {\n      history.push(`/decks/${deckId}/edit/`); //console.log(\"HERE\", params.deckId);\n      //updateDeck();\n    }\n\n    if (btnType === \"cancelEditDeck\") {\n      history.push(\"/decks/:deckId/\");\n    }\n\n    if (btnType === \"editCard\") {\n      history.push(`/decks/${deckId}/cards/:cardId/edit`);\n    }\n\n    if (btnType === \"doneAddCard\") {\n      history.push(\"/decks/:deckId/\");\n    }\n\n    if (btnType === \"saveAddCard\") {\n      createCard(currentDeck.id, newCard);\n      history.push(`/decks/${currentDeck.id}`);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          children: [/*#__PURE__*/_jsxDEV(Home, {\n            OnClick: OnClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DeckList, {\n            OnClick: OnClick,\n            allDecksWithCards: allDecks,\n            setAllDecksWithCards: setAllDecks\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/new\",\n          children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CreateDeck, {\n            OnClick: OnClick,\n            newDeckName: newDeckName,\n            setNewDeckName: setNewDeckName,\n            newDeckDescription: newDeckDescription,\n            setNewDeckDescription: setNewDeckDescription,\n            newDeckObject: newDeckObject,\n            setNewDeckObject: setNewDeckObject\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/:deckId/cards/:cardId/edit\",\n          children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(EditCard, {\n            OnClick: OnClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/:deckId/edit\",\n          children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(EditDeck, {\n            OnClick: OnClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/:deckId/study\",\n          children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Study, {\n            OnClick: OnClick,\n            currentDeckId: currentDeckId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/:deckId/cards/new\",\n          children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AddCard, {\n            OnClick: OnClick,\n            newCard: newCard,\n            setNewCard: setNewCard,\n            currentDeck: currentDeck\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/:deckId\",\n          children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CurrentDeck, {\n            OnClick: OnClick,\n            currentDeck: currentDeck,\n            currentCardsArray: currentCardsArray,\n            setCurrentDeck: setCurrentDeck,\n            setCurrentCardsArray: setCurrentCardsArray\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          children: /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Layout, \"4W9t4V22g290L4PAvbGYDzxWuVY=\", false, function () {\n  return [useHistory];\n});\n\n_c = Layout;\nexport default Layout; //load decks\n\n/*useEffect(() => {\n    const abortController = new AbortController();\n    async function loadDecks() {\n      try {\n        const response = await fetch(`http://localhost:5000/decks`, {\n          signal: abortController.signal,\n        });\n        const decksFromAPI = await response.json();\n        setDecks(decksFromAPI);\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          console.log(\"Aborted loadDecks\");\n        } else {\n          throw error;\n        }\n      }\n    }\n    loadDecks();\n\n    return () => abortController.abort();\n    //}, [decks]);\n  }, []);*/\n//old study\n\n/**\n * <Study\n              OnClick={OnClick}\n              setCurrentDeck={setCurrentDeck}\n              currentDeck={currentDeck}\n              // currentCardsArray={currentCardsArray}\n              // allDecksWithCards={allDecksWithCards}\n              deckLength={deckLength}\n              // setDeckLength={setDeckLength}\n              currentDeckId={currentDeckId}\n            />\n */\n\n/*const handleSubmit = (event) => {\n    //console.log(\"name:\", newDeckName, \"desc\", newDeckDescription);\n    setNewDeckObject({ name: newDeckName, description: newDeckDescription });\n    createDeck(newDeckObject);\n  };*/\n\n/*const handleDelete = (event) => {\n    const deckIdToDelete = event.target.parentNode.id;\n    deleteDeck(deckIdToDelete);\n    history.go(\"/\");\n  };*/\n\nvar _c;\n\n$RefreshReg$(_c, \"Layout\");","map":{"version":3,"sources":["/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/index.js"],"names":["React","Fragment","useState","Route","Switch","useHistory","Header","NotFound","Home","CreateDeck","DeckList","Study","NavBar","CurrentDeck","EditDeck","AddCard","EditCard","createCard","createDeck","deleteDeck","Layout","allDecks","setAllDecks","currentDeck","setCurrentDeck","currentCardsArray","setCurrentCardsArray","newDeckObject","setNewDeckObject","name","description","newCard","setNewCard","front","back","history","deckLength","setDeckLength","currentDeckId","setCurrentDeckId","handleSetDeck","id","OnClick","event","btnType","target","deckId","parentNode","console","log","push","go","newDeckName","newDeckDescription","setNewDeckName","setNewDeckDescription"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from \"react\";\nimport { Route, Switch, useHistory } from \"react-router-dom\";\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport Home from \"./Home\";\nimport CreateDeck from \"./CreateDeck\";\nimport DeckList from \"./DeckList\";\nimport Study from \"./Study\";\nimport NavBar from \"./NavBar\";\nimport CurrentDeck from \"./CurrentDeck\";\nimport EditDeck from \"./EditDeck\";\nimport AddCard from \"./AddCard\";\nimport EditCard from \"./EditCard\";\nimport { createCard, createDeck, deleteDeck } from \"../utils/api\";\n\nfunction Layout() {\n  \n  const [allDecks, setAllDecks] = useState({});\n  const [currentDeck, setCurrentDeck] = useState({});\n\t//\n\t\n  const [currentCardsArray, setCurrentCardsArray] = useState({});\n  const [newDeckObject, setNewDeckObject] = useState({\n    name: \"\",\n    description: \"\",\n  });\n  const [newCard, setNewCard] = useState({ front: \"\", back: \"\" });\n  const history = useHistory();\n  //const [decks, setDecks] = useState({});\n  const [deckLength, setDeckLength] = useState(0);\n  const [currentDeckId, setCurrentDeckId] = useState(0);\n\n  const handleSetDeck = (id) => {\n    setCurrentDeckId(id);\n  };\n\n  const OnClick = (event) => {\n    const btnType = event.target.id;\n    const deckId = event.target.parentNode.id;\n    console.log(btnType, deckId);\n    if (btnType === \"viewDeck\") {\n      history.push(`/decks/${deckId}`);\n      console.log(currentDeck);\n    }\n    if (btnType === \"studyDeck\") {\n      handleSetDeck(deckId);\n      history.push(`/decks/${deckId ? deckId : currentDeck.id}/study`);\n    }\n    if (btnType === \"deleteDeck\") {\n      deleteDeck(deckId);\n      history.go(\"/\");\n    }\n    if (btnType === \"cancelCreateDeck\") {\n      history.push(\"/\");\n    }\n    if (btnType === \"submitCreateDeck\") {\n      //      handleSubmit(event);\n      setNewDeckObject({ name: newDeckName, description: newDeckDescription });\n      createDeck(newDeckObject);\n      history.push(\"/\");\n    }\n    if (btnType === \"addCards\") {\n      history.push(`/decks/${deckId ? deckId : currentDeck.id}/cards/new`);\n    }\n    if (btnType === \"editDeck\") {\n      history.push(`/decks/${deckId}/edit/`);\n      //console.log(\"HERE\", params.deckId);\n\n      //updateDeck();\n    }\n    if (btnType === \"cancelEditDeck\") {\n      history.push(\"/decks/:deckId/\");\n    }\n    if (btnType === \"editCard\") {\n      history.push(`/decks/${deckId}/cards/:cardId/edit`);\n    }\n    if (btnType === \"doneAddCard\") {\n      history.push(\"/decks/:deckId/\");\n    }\n    if (btnType === \"saveAddCard\") {\n      createCard(currentDeck.id, newCard);\n      history.push(`/decks/${currentDeck.id}`);\n    }\n  };\n\n  return (\n    <Fragment>\n      <Header />\n      <div className=\"container\">\n        {/* TODO: Implement the screen starting here */}\n        <Switch>\n          <Route exact={true} path=\"/\">\n            <Home OnClick={OnClick} />\n            <DeckList\n              OnClick={OnClick}\n              allDecksWithCards={allDecks}\n              setAllDecksWithCards={setAllDecks}\n            />\n          </Route>\n          <Route path=\"/decks/new\">\n            <NavBar />\n            <CreateDeck\n              OnClick={OnClick}\n              newDeckName={newDeckName}\n              setNewDeckName={setNewDeckName}\n              newDeckDescription={newDeckDescription}\n              setNewDeckDescription={setNewDeckDescription}\n              newDeckObject={newDeckObject}\n              setNewDeckObject={setNewDeckObject}\n            />\n          </Route>\n\n          <Route path=\"/decks/:deckId/cards/:cardId/edit\">\n            <NavBar />\n            <EditCard OnClick={OnClick} />\n          </Route>\n          <Route path=\"/decks/:deckId/edit\">\n            <NavBar />\n            <EditDeck OnClick={OnClick} />\n          </Route>\n          <Route path=\"/decks/:deckId/study\">\n            <NavBar />\n            <Study OnClick={OnClick} currentDeckId={currentDeckId} />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/new\">\n            <NavBar />\n            <AddCard\n              OnClick={OnClick}\n              newCard={newCard}\n              setNewCard={setNewCard}\n              currentDeck={currentDeck}\n            />\n          </Route>\n          <Route path=\"/decks/:deckId\">\n            <NavBar />\n            <CurrentDeck\n              OnClick={OnClick}\n              currentDeck={currentDeck}\n              currentCardsArray={currentCardsArray}\n              setCurrentDeck={setCurrentDeck}\n              setCurrentCardsArray={setCurrentCardsArray}\n            />\n          </Route>\n\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Layout;\n\n//load decks\n/*useEffect(() => {\n    const abortController = new AbortController();\n    async function loadDecks() {\n      try {\n        const response = await fetch(`http://localhost:5000/decks`, {\n          signal: abortController.signal,\n        });\n        const decksFromAPI = await response.json();\n        setDecks(decksFromAPI);\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          console.log(\"Aborted loadDecks\");\n        } else {\n          throw error;\n        }\n      }\n    }\n    loadDecks();\n\n    return () => abortController.abort();\n    //}, [decks]);\n  }, []);*/\n\n//old study\n/**\n * <Study\n              OnClick={OnClick}\n              setCurrentDeck={setCurrentDeck}\n              currentDeck={currentDeck}\n              // currentCardsArray={currentCardsArray}\n              // allDecksWithCards={allDecksWithCards}\n              deckLength={deckLength}\n              // setDeckLength={setDeckLength}\n              currentDeckId={currentDeckId}\n            />\n */\n\n/*const handleSubmit = (event) => {\n    //console.log(\"name:\", newDeckName, \"desc\", newDeckDescription);\n    setNewDeckObject({ name: newDeckName, description: newDeckDescription });\n    createDeck(newDeckObject);\n  };*/\n\n/*const handleDelete = (event) => {\n    const deckIdToDelete = event.target.parentNode.id;\n    deleteDeck(deckIdToDelete);\n    history.go(\"/\");\n  };*/\n"]},"metadata":{},"sourceType":"module"}