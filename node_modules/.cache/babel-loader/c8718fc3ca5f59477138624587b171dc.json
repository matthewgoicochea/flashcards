{"ast":null,"code":"var _jsxFileName = \"/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/Study.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Study({\n  OnClick\n}) {\n  _s();\n\n  const params = useParams();\n  const deckId = params.deckId;\n  const [studyDeck, setStudyDeck] = useState(false);\n  const [studyState, setStudyState] = useState({\n    studyCardNum: 0,\n    flipped: false\n  });\n  useEffect(() => {\n    async function loadDeck() {\n      const response = await fetch(`http://localhost:5000/cards?deckId=${deckId}`);\n      const deck = await response.json();\n      setStudyDeck(deck);\n    }\n\n    loadDeck();\n  }, []);\n\n  const onFlip = () => {\n    setStudyState({ ...studyState,\n      flipped: !studyState.flipped\n    });\n  };\n\n  const onNext = () => {\n    setStudyState({ ...studyState,\n      flipped: false,\n      studyCardNum: studyState.studyCardNum + 1\n    });\n  };\n\n  const flipBtn = /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onFlip,\n    className: \"btn btn-secondary\",\n    children: \"Flip\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n\n  const bothBtns = /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onFlip,\n      id: \"flipFront\",\n      className: \"btn btn-secondary\",\n      children: \"Flip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onNext,\n      id: \"flipBack\",\n      className: \"btn btn-primary\",\n      children: \"Flip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n\n  const front = studyDeck ? studyDeck[studyState.studyCardNum].front : \"loading...\";\n  const back = studyDeck ? studyDeck[studyState.studyCardNum].back : \"loading...\";\n  const deckLength = studyDeck ? studyDeck.length : \"...loading\";\n\n  const studyCard = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"card-title\",\n        children: [\"Card \", studyState.studyCardNum + 1, \" of \", deckLength]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"card-text\",\n        children: studyState.flipped ? back : front\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), studyState.flipped ? bothBtns : flipBtn]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Study: Current Deck Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), studyCard]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Study, \"UlWv7FHn0RN2jBuC6czgl4QdMzM=\", false, function () {\n  return [useParams];\n});\n\n_c = Study;\nexport default Study;\n/**\n * \n *   const handleSetDeck = (id) => {\n    setCurrentDeckId(id);\n  };\n */\n\nvar _c;\n\n$RefreshReg$(_c, \"Study\");","map":{"version":3,"sources":["/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/Study.jsx"],"names":["React","Fragment","useEffect","useState","useParams","Study","OnClick","params","deckId","studyDeck","setStudyDeck","studyState","setStudyState","studyCardNum","flipped","loadDeck","response","fetch","deck","json","onFlip","onNext","flipBtn","bothBtns","front","back","deckLength","length","studyCard"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\n\nfunction Study({ OnClick }) {\n  const params = useParams();\n  const deckId = params.deckId;\n\n  const [studyDeck, setStudyDeck] = useState(false);\n  const [studyState, setStudyState] = useState({\n    studyCardNum: 0,\n    flipped: false,\n  });\n\n  useEffect(() => {\n    async function loadDeck() {\n      const response = await fetch(\n        `http://localhost:5000/cards?deckId=${deckId}`\n      );\n      const deck = await response.json();\n      setStudyDeck(deck);\n    }\n    loadDeck();\n  }, []);\n\n  const onFlip = () => {\n    setStudyState({ ...studyState, flipped: !studyState.flipped });\n  };\n\n  const onNext = () => {\n    setStudyState({\n      ...studyState,\n      flipped: false,\n      studyCardNum: studyState.studyCardNum + 1,\n    });\n  };\n\n  const flipBtn = (\n    <button onClick={onFlip} className=\"btn btn-secondary\">\n      Flip\n    </button>\n  );\n\n  const bothBtns = (\n    <Fragment>\n      <button onClick={onFlip} id=\"flipFront\" className=\"btn btn-secondary\">\n        Flip\n      </button>\n      <button onClick={onNext} id=\"flipBack\" className=\"btn btn-primary\">\n        Flip\n      </button>\n    </Fragment>\n  );\n\n  const front = studyDeck\n    ? studyDeck[studyState.studyCardNum].front\n    : \"loading...\";\n  const back = studyDeck\n    ? studyDeck[studyState.studyCardNum].back\n    : \"loading...\";\n\n  const deckLength = studyDeck ? studyDeck.length : \"...loading\";\n\n  const studyCard = (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">\n          Card {studyState.studyCardNum + 1} of {deckLength}\n        </h5>\n        <p className=\"card-text\">\n          {studyState.flipped ? back : front}\n          {/*studyDeck ? studyDeck[studyState.studyCardNum].front : \"loading...\"*/}\n          {/*flipped ? back : front*/}\n        </p>\n        {/*flipped ? bothBtns : flipBtn*/}\n        {studyState.flipped ? bothBtns : flipBtn}\n      </div>\n    </div>\n  );\n\n  return (\n    <Fragment>\n      <h1>Study: Current Deck Name</h1>\n      {studyCard}\n    </Fragment>\n  );\n}\n\nexport default Study;\n\n/**\n * \n *   const handleSetDeck = (id) => {\n    setCurrentDeckId(id);\n  };\n */\n"]},"metadata":{},"sourceType":"module"}