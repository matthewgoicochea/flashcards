{"ast":null,"code":"var _jsxFileName = \"/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { Route, Switch, useHistory } from \"react-router-dom\";\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport Home from \"./Home\";\nimport CreateDeck from \"./CreateDeck\";\nimport DeckList from \"./DeckList\";\nimport Study from \"./Study\";\nimport NavBar from \"./NavBar\";\nimport CurrentDeck from \"./CurrentDeck\";\nimport EditDeck from \"./EditDeck\";\nimport AddCard from \"./AddCard\";\nimport EditCard from \"./EditCard\";\nimport { createCard, createDeck, deleteDeck } from \"../utils/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Layout() {\n  _s();\n\n  const [newDeckName, setNewDeckName] = useState(\"\");\n  const [newDeckDescription, setNewDeckDescription] = useState(\"\");\n  const [allDecksWithCards, setAllDecksWithCards] = useState({});\n  const [currentDeck, setCurrentDeck] = useState({});\n  const [currentCardsArray, setCurrentCardsArray] = useState({});\n  const [newDeckObject, setNewDeckObject] = useState({\n    name: \"\",\n    description: \"\"\n  });\n  const [newCard, setNewCard] = useState({\n    front: \"\",\n    back: \"\"\n  });\n  const history = useHistory();\n  const [decks, setDecks] = useState({});\n  const [deckLength, setDeckLength] = useState(0); //load decks\n\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    async function loadDecks() {\n      try {\n        const response = await fetch(`http://localhost:5000/decks`, {\n          signal: abortController.signal\n        });\n        const decksFromAPI = await response.json();\n        setDecks(decksFromAPI);\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          console.log(\"Aborted loadDecks\");\n        } else {\n          throw error;\n        }\n      }\n    }\n\n    loadDecks();\n    return () => abortController.abort();\n  }, [decks]);\n\n  const handleSetDeck = id => {\n    console.log(\"works:\", id);\n    setCurrentDeck({});\n  };\n\n  const OnClick = event => {\n    const btnType = event.target.id;\n    const deckId = event.target.parentNode.id;\n    console.log(btnType, deckId);\n\n    if (btnType === \"viewDeck\") {\n      history.push(`/decks/${deckId}`);\n      console.log(currentDeck);\n    }\n\n    if (btnType === \"studyDeck\") {\n      handleSetDeck(deckId);\n      history.push(`/decks/${deckId ? deckId : currentDeck.id}/study`);\n    }\n\n    if (btnType === \"deleteDeck\") {\n      deleteDeck(deckId);\n      history.go(\"/\");\n    }\n\n    if (btnType === \"cancelCreateDeck\") {\n      history.push(\"/\");\n    }\n\n    if (btnType === \"submitCreateDeck\") {\n      //      handleSubmit(event);\n      setNewDeckObject({\n        name: newDeckName,\n        description: newDeckDescription\n      });\n      createDeck(newDeckObject);\n      history.push(\"/\");\n    }\n\n    if (btnType === \"addCards\") {\n      history.push(`/decks/${deckId ? deckId : currentDeck.id}/cards/new`);\n    }\n\n    if (btnType === \"editDeck\") {\n      history.push(`/decks/${deckId}/edit/`); //console.log(\"HERE\", params.deckId);\n      //updateDeck();\n    }\n\n    if (btnType === \"cancelEditDeck\") {\n      history.push(\"/decks/:deckId/\");\n    }\n\n    if (btnType === \"editCard\") {\n      history.push(`/decks/${deckId}/cards/:cardId/edit`);\n    }\n\n    if (btnType === \"doneAddCard\") {\n      history.push(\"/decks/:deckId/\");\n    }\n\n    if (btnType === \"saveAddCard\") {\n      createCard(currentDeck.id, newCard);\n      history.push(`/decks/${currentDeck.id}`);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          children: [/*#__PURE__*/_jsxDEV(Home, {\n            OnClick: OnClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DeckList, {\n            OnClick: OnClick,\n            allDecksWithCards: allDecksWithCards,\n            setAllDecksWithCards: setAllDecksWithCards\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/new\",\n          children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CreateDeck, {\n            OnClick: OnClick,\n            newDeckName: newDeckName,\n            setNewDeckName: setNewDeckName,\n            newDeckDescription: newDeckDescription,\n            setNewDeckDescription: setNewDeckDescription,\n            newDeckObject: newDeckObject,\n            setNewDeckObject: setNewDeckObject\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/:deckId/cards/:cardId/edit\",\n          children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(EditCard, {\n            OnClick: OnClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/:deckId/edit\",\n          children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(EditDeck, {\n            OnClick: OnClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/:deckId/study\",\n          children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Study, {\n            OnClick: OnClick,\n            setCurrentDeck: setCurrentDeck,\n            currentDeck: currentDeck,\n            currentCardsArray: currentCardsArray,\n            allDecksWithCards: allDecksWithCards,\n            deckLength: deckLength,\n            setDeckLength: setDeckLength\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/:deckId/cards/new\",\n          children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AddCard, {\n            OnClick: OnClick,\n            newCard: newCard,\n            setNewCard: setNewCard,\n            currentDeck: currentDeck\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/:deckId\",\n          children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CurrentDeck, {\n            OnClick: OnClick,\n            currentDeck: currentDeck,\n            currentCardsArray: currentCardsArray,\n            setCurrentDeck: setCurrentDeck,\n            setCurrentCardsArray: setCurrentCardsArray\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          children: /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Layout, \"WeaN+4HVmhjvorJs6tk0qm7uQwE=\", false, function () {\n  return [useHistory];\n});\n\n_c = Layout;\nexport default Layout;\n/*const handleSubmit = (event) => {\n    //console.log(\"name:\", newDeckName, \"desc\", newDeckDescription);\n    setNewDeckObject({ name: newDeckName, description: newDeckDescription });\n    createDeck(newDeckObject);\n  };*/\n\n/*const handleDelete = (event) => {\n    const deckIdToDelete = event.target.parentNode.id;\n    deleteDeck(deckIdToDelete);\n    history.go(\"/\");\n  };*/\n\nvar _c;\n\n$RefreshReg$(_c, \"Layout\");","map":{"version":3,"sources":["/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/index.js"],"names":["React","Fragment","useEffect","useState","Route","Switch","useHistory","Header","NotFound","Home","CreateDeck","DeckList","Study","NavBar","CurrentDeck","EditDeck","AddCard","EditCard","createCard","createDeck","deleteDeck","Layout","newDeckName","setNewDeckName","newDeckDescription","setNewDeckDescription","allDecksWithCards","setAllDecksWithCards","currentDeck","setCurrentDeck","currentCardsArray","setCurrentCardsArray","newDeckObject","setNewDeckObject","name","description","newCard","setNewCard","front","back","history","decks","setDecks","deckLength","setDeckLength","abortController","AbortController","loadDecks","response","fetch","signal","decksFromAPI","json","error","console","log","abort","handleSetDeck","id","OnClick","event","btnType","target","deckId","parentNode","push","go"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport { Route, Switch, useHistory } from \"react-router-dom\";\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport Home from \"./Home\";\nimport CreateDeck from \"./CreateDeck\";\nimport DeckList from \"./DeckList\";\nimport Study from \"./Study\";\nimport NavBar from \"./NavBar\";\nimport CurrentDeck from \"./CurrentDeck\";\nimport EditDeck from \"./EditDeck\";\nimport AddCard from \"./AddCard\";\nimport EditCard from \"./EditCard\";\nimport { createCard, createDeck, deleteDeck } from \"../utils/api\";\n\nfunction Layout() {\n  const [newDeckName, setNewDeckName] = useState(\"\");\n  const [newDeckDescription, setNewDeckDescription] = useState(\"\");\n  const [allDecksWithCards, setAllDecksWithCards] = useState({});\n  const [currentDeck, setCurrentDeck] = useState({});\n  const [currentCardsArray, setCurrentCardsArray] = useState({});\n  const [newDeckObject, setNewDeckObject] = useState({\n    name: \"\",\n    description: \"\",\n  });\n  const [newCard, setNewCard] = useState({ front: \"\", back: \"\" });\n  const history = useHistory();\n  const [decks, setDecks] = useState({});\n  const [deckLength, setDeckLength] = useState(0);\n  //load decks\n  useEffect(() => {\n    const abortController = new AbortController();\n    async function loadDecks() {\n      try {\n        const response = await fetch(`http://localhost:5000/decks`, {\n          signal: abortController.signal,\n        });\n        const decksFromAPI = await response.json();\n        setDecks(decksFromAPI);\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          console.log(\"Aborted loadDecks\");\n        } else {\n          throw error;\n        }\n      }\n    }\n    loadDecks();\n\n    return () => abortController.abort();\n  }, [decks]);\n\n  const handleSetDeck = (id) => {\n    console.log(\"works:\", id);\n\t\tsetCurrentDeck({})\n  };\n\n  const OnClick = (event) => {\n    const btnType = event.target.id;\n    const deckId = event.target.parentNode.id;\n    console.log(btnType, deckId);\n    if (btnType === \"viewDeck\") {\n      history.push(`/decks/${deckId}`);\n      console.log(currentDeck);\n    }\n    if (btnType === \"studyDeck\") {\n      handleSetDeck(deckId);\n      history.push(`/decks/${deckId ? deckId : currentDeck.id}/study`);\n    }\n    if (btnType === \"deleteDeck\") {\n      deleteDeck(deckId);\n      history.go(\"/\");\n    }\n    if (btnType === \"cancelCreateDeck\") {\n      history.push(\"/\");\n    }\n    if (btnType === \"submitCreateDeck\") {\n      //      handleSubmit(event);\n      setNewDeckObject({ name: newDeckName, description: newDeckDescription });\n      createDeck(newDeckObject);\n      history.push(\"/\");\n    }\n    if (btnType === \"addCards\") {\n      history.push(`/decks/${deckId ? deckId : currentDeck.id}/cards/new`);\n    }\n    if (btnType === \"editDeck\") {\n      history.push(`/decks/${deckId}/edit/`);\n      //console.log(\"HERE\", params.deckId);\n\n      //updateDeck();\n    }\n    if (btnType === \"cancelEditDeck\") {\n      history.push(\"/decks/:deckId/\");\n    }\n    if (btnType === \"editCard\") {\n      history.push(`/decks/${deckId}/cards/:cardId/edit`);\n    }\n    if (btnType === \"doneAddCard\") {\n      history.push(\"/decks/:deckId/\");\n    }\n    if (btnType === \"saveAddCard\") {\n      createCard(currentDeck.id, newCard);\n      history.push(`/decks/${currentDeck.id}`);\n    }\n  };\n\n  return (\n    <Fragment>\n      <Header />\n      <div className=\"container\">\n        {/* TODO: Implement the screen starting here */}\n        <Switch>\n          <Route exact={true} path=\"/\">\n            <Home OnClick={OnClick} />\n            <DeckList\n              OnClick={OnClick}\n              allDecksWithCards={allDecksWithCards}\n              setAllDecksWithCards={setAllDecksWithCards}\n            />\n          </Route>\n          <Route path=\"/decks/new\">\n            <NavBar />\n            <CreateDeck\n              OnClick={OnClick}\n              newDeckName={newDeckName}\n              setNewDeckName={setNewDeckName}\n              newDeckDescription={newDeckDescription}\n              setNewDeckDescription={setNewDeckDescription}\n              newDeckObject={newDeckObject}\n              setNewDeckObject={setNewDeckObject}\n            />\n          </Route>\n\n          <Route path=\"/decks/:deckId/cards/:cardId/edit\">\n            <NavBar />\n            <EditCard OnClick={OnClick} />\n          </Route>\n          <Route path=\"/decks/:deckId/edit\">\n            <NavBar />\n            <EditDeck OnClick={OnClick} />\n          </Route>\n          <Route path=\"/decks/:deckId/study\">\n            <NavBar />\n            <Study\n              OnClick={OnClick}\n              setCurrentDeck={setCurrentDeck}\n              currentDeck={currentDeck}\n              currentCardsArray={currentCardsArray}\n              allDecksWithCards={allDecksWithCards}\n              deckLength={deckLength}\n              setDeckLength={setDeckLength}\n            />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/new\">\n            <NavBar />\n            <AddCard\n              OnClick={OnClick}\n              newCard={newCard}\n              setNewCard={setNewCard}\n              currentDeck={currentDeck}\n            />\n          </Route>\n          <Route path=\"/decks/:deckId\">\n            <NavBar />\n            <CurrentDeck\n              OnClick={OnClick}\n              currentDeck={currentDeck}\n              currentCardsArray={currentCardsArray}\n              setCurrentDeck={setCurrentDeck}\n              setCurrentCardsArray={setCurrentCardsArray}\n            />\n          </Route>\n\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Layout;\n\n/*const handleSubmit = (event) => {\n    //console.log(\"name:\", newDeckName, \"desc\", newDeckDescription);\n    setNewDeckObject({ name: newDeckName, description: newDeckDescription });\n    createDeck(newDeckObject);\n  };*/\n\n/*const handleDelete = (event) => {\n    const deckIdToDelete = event.target.parentNode.id;\n    deleteDeck(deckIdToDelete);\n    history.go(\"/\");\n  };*/\n"]},"metadata":{},"sourceType":"module"}