{"ast":null,"code":"var _jsxFileName = \"/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/Study.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { readDeck } from \"../utils/api\";\nimport NavBar from \"./NavBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Study({\n  OnClick,\n  studyState,\n  setStudyState,\n  currentDeck\n}) {\n  _s();\n\n  const params = useParams();\n  const deckId = params.deckId;\n  const history = useHistory();\n  const [studyCards, setStudyCards] = useState({});\n  const front = studyCards ? \"front\" : \"load\";\n  console.log();\n  useEffect(() => {\n    const deck = readDeck(deckId);\n    deck.then(deck => {\n      setStudyState({ ...studyState,\n        deckId: deck.id,\n        cards: deck.cards,\n        name: deck.name,\n        description: deck.description,\n        deckLength: deck.cards.length,\n        cardNumber: 0\n      });\n      setStudyCards(deck.cards);\n    });\n  }, []);\n\n  const onFlip = () => {\n    setStudyState({ ...studyState,\n      flipped: !studyState.flipped\n    });\n  };\n\n  const onNext = () => {\n    if (studyState.cardNumber + 1 === studyState.deckLength) {\n      const restart = window.confirm(\"Restart cards? \\n \\n Click 'cancel' to return to the home page.\");\n\n      if (restart) {\n        history.go(0);\n      } else {\n        history.push(\"/\");\n      }\n    }\n\n    setStudyState({ ...studyState,\n      cardNumber: studyState.cardNumber + 1,\n      flipped: false\n    });\n  };\n\n  const flipBtn = /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onFlip,\n    className: \"btn btn-secondary\",\n    children: \"Flip\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n\n  const bothBtns = /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onFlip,\n      id: \"flipFront\",\n      className: \"btn btn-secondary\",\n      children: \"Flip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onNext,\n      id: \"flipBack\",\n      className: \"btn btn-primary\",\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this); //console.log(studyCards);\n\n\n  const studyCard = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"card-title\",\n        children: [\"Card \", studyState.cardNumber + 1, \" of \", studyState.deckLength]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: studyState.flipped ? \"back\" : front\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), studyState.flipped ? bothBtns : flipBtn]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n\n  const notEnoughCards = num => {\n    let message = \"init\";\n\n    if (num === 1) {\n      message = \"There is 1 card in this deck.\";\n    } else {\n      message = `There are ${num} cards in this deck.`;\n    }\n\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Not enough cards.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You need at least 3 cards to study. \", message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: `/decks/${deckId}/cards/new`,\n        className: \"btn btn-primary\",\n        id: \"addCards\",\n        children: \"Add Cards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {\n      OnClick: OnClick,\n      deckName: studyState.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Study: \", studyState.name ? studyState.name : \"...loading\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), studyState.deckLength < 3 ? notEnoughCards(studyState.deckLength) : studyCard]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Study, \"9Kw4Bj2XWXbTmU2084AfevH3grM=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = Study;\nexport default Study;\n\nvar _c;\n\n$RefreshReg$(_c, \"Study\");","map":{"version":3,"sources":["/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/Study.jsx"],"names":["React","Fragment","useEffect","useState","useHistory","useParams","Link","readDeck","NavBar","Study","OnClick","studyState","setStudyState","currentDeck","params","deckId","history","studyCards","setStudyCards","front","console","log","deck","then","id","cards","name","description","deckLength","length","cardNumber","onFlip","flipped","onNext","restart","window","confirm","go","push","flipBtn","bothBtns","studyCard","notEnoughCards","num","message"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { readDeck } from \"../utils/api\";\nimport NavBar from \"./NavBar\";\n\nfunction Study({ OnClick, studyState, setStudyState, currentDeck }) {\n  const params = useParams();\n  const deckId = params.deckId;\n  const history = useHistory();\n\n  const [studyCards, setStudyCards] = useState({});\n  const front = studyCards ? \"front\" : \"load\";\n  console.log()\n\n  useEffect(() => {\n    const deck = readDeck(deckId);\n    deck.then((deck) => {\n      setStudyState({\n        ...studyState,\n        deckId: deck.id,\n        cards: deck.cards,\n        name: deck.name,\n        description: deck.description,\n        deckLength: deck.cards.length,\n        cardNumber: 0,\n      });\n      setStudyCards(deck.cards);\n    });\n  }, []);\n\n  const onFlip = () => {\n    setStudyState({ ...studyState, flipped: !studyState.flipped });\n  };\n\n  const onNext = () => {\n    if (studyState.cardNumber + 1 === studyState.deckLength) {\n      const restart = window.confirm(\n        \"Restart cards? \\n \\n Click 'cancel' to return to the home page.\"\n      );\n      if (restart) {\n        history.go(0);\n      } else {\n        history.push(\"/\");\n      }\n    }\n    setStudyState({\n      ...studyState,\n      cardNumber: studyState.cardNumber + 1,\n      flipped: false,\n    });\n  };\n\n  const flipBtn = (\n    <button onClick={onFlip} className=\"btn btn-secondary\">\n      Flip\n    </button>\n  );\n\n  const bothBtns = (\n    <Fragment>\n      <button onClick={onFlip} id=\"flipFront\" className=\"btn btn-secondary\">\n        Flip\n      </button>\n      <button onClick={onNext} id=\"flipBack\" className=\"btn btn-primary\">\n        Next\n      </button>\n    </Fragment>\n  );\n  //console.log(studyCards);\n  const studyCard = (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">\n          Card {studyState.cardNumber + 1} of {studyState.deckLength}\n        </h5>\n        <p>{studyState.flipped ? \"back\" : front}</p>\n        {studyState.flipped ? bothBtns : flipBtn}\n      </div>\n    </div>\n  );\n\n  const notEnoughCards = (num) => {\n    let message = \"init\";\n    if (num === 1) {\n      message = \"There is 1 card in this deck.\";\n    } else {\n      message = `There are ${num} cards in this deck.`;\n    }\n    return (\n      <Fragment>\n        <h2>Not enough cards.</h2>\n        <p>You need at least 3 cards to study. {message}</p>\n        <Link\n          to={`/decks/${deckId}/cards/new`}\n          className=\"btn btn-primary\"\n          id=\"addCards\"\n        >\n          Add Cards\n        </Link>\n      </Fragment>\n    );\n  };\n  return (\n    <Fragment>\n      <NavBar OnClick={OnClick} deckName={studyState.name} />\n      <h1>Study: {studyState.name ? studyState.name : \"...loading\"}</h1>\n      {studyState.deckLength < 3\n        ? notEnoughCards(studyState.deckLength)\n        : studyCard}\n    </Fragment>\n  );\n}\n\nexport default Study;\n"]},"metadata":{},"sourceType":"module"}