{"ast":null,"code":"var _jsxFileName = \"/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/EditCard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { readCard, readDeck, updateCard } from \"../utils/api\";\nimport BreadcrumbBar from \"./BreadcrumbBar\";\nimport CardForm from \"./CardForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EditCard({\n  newCard,\n  setNewCard,\n  currentDeck\n}) {\n  _s();\n\n  const params = useParams();\n  const deckId = params.deckId;\n  const cardId = params.cardId;\n  const history = useHistory(); // initializes component for editing \n\n  const [editCardState, setEditCardState] = useState({\n    edit: false\n  }); // loads deck and card to edit\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    setNewCard({\n      front: \"\",\n      back: \"\"\n    });\n    readDeck(deckId, abortController.signal).then(deck => {\n      setEditCardState({ ...editCardState,\n        edit: true,\n        deckName: deck.name\n      });\n      return readCard(cardId, abortController.signal);\n    }).then(card => {\n      setEditCardState({ ...editCardState,\n        edit: true,\n        deckName: editCardState.deckName,\n        front: card.front,\n        back: card.back\n      });\n    });\n    return () => abortController.abort();\n  }, []);\n\n  const onCancel = () => {\n    setEditCardState({\n      edit: false\n    });\n    history.push(`/decks/${deckId}`);\n  }; // compiles new card\n\n\n  const onSubmit = () => {\n    const editedCard = {\n      id: cardId,\n      front: editCardState.front,\n      back: editCardState.back,\n      deckId: parseInt(deckId)\n    };\n    updateCard(editedCard);\n    history.push(`/decks/${deckId}`);\n    setEditCardState({\n      edit: false\n    });\n  };\n\n  if (editCardState.edit) {\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(BreadcrumbBar, {\n        nav1: `Deck ${currentDeck.name}`,\n        link1: `/decks/${deckId}`,\n        nav2: `Edit Card ${cardId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"mt-2\",\n        children: \"Edit Card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardForm, {\n        newCard: newCard,\n        setNewCard: setNewCard,\n        editCardState: editCardState,\n        setEditCardState: setEditCardState,\n        cardFront: editCardState.front,\n        cardBack: editCardState.back\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary mr-2\",\n        id: \"doneEditCard\",\n        onClick: onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        id: \"submitEditCard\",\n        onClick: onSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  }\n\n  return \"Loading\";\n}\n\n_s(EditCard, \"BoZTu1FXwwqQwBY49wIrya0j/K0=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = EditCard;\nexport default EditCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditCard\");","map":{"version":3,"sources":["/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/EditCard.jsx"],"names":["React","Fragment","useEffect","useState","useHistory","useParams","readCard","readDeck","updateCard","BreadcrumbBar","CardForm","EditCard","newCard","setNewCard","currentDeck","params","deckId","cardId","history","editCardState","setEditCardState","edit","abortController","AbortController","front","back","signal","then","deck","deckName","name","card","abort","onCancel","push","onSubmit","editedCard","id","parseInt"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { readCard, readDeck, updateCard } from \"../utils/api\";\nimport BreadcrumbBar from \"./BreadcrumbBar\";\nimport CardForm from \"./CardForm\";\n\nfunction EditCard({ newCard, setNewCard, currentDeck }) {\n  const params = useParams();\n  const deckId = params.deckId;\n  const cardId = params.cardId;\n  const history = useHistory();\n\n\t// initializes component for editing \n  const [editCardState, setEditCardState] = useState({\n    edit: false,\n  });\n\n\t// loads deck and card to edit\n  useEffect(() => {\n    const abortController = new AbortController();\n    setNewCard({ front: \"\", back: \"\" });\n    readDeck(deckId, abortController.signal)\n      .then((deck) => {\n        setEditCardState({ ...editCardState, edit: true, deckName: deck.name });\n        return readCard(cardId, abortController.signal);\n      })\n      .then((card) => {\n        setEditCardState({\n          ...editCardState,\n          edit: true,\n          deckName: editCardState.deckName,\n          front: card.front,\n          back: card.back,\n        });\n      });\n    return () => abortController.abort();\n  }, []);\n\n  const onCancel = () => {\n    setEditCardState({ edit: false });\n    history.push(`/decks/${deckId}`);\n  };\n\n\n\t// compiles new card\n  const onSubmit = () => {\n    const editedCard = {\n      id: cardId,\n      front: editCardState.front,\n      back: editCardState.back,\n      deckId: parseInt(deckId),\n    };\n    updateCard(editedCard);\n    history.push(`/decks/${deckId}`);\n    setEditCardState({ edit: false });\n  };\n\n  if (editCardState.edit) {\n    return (\n      <Fragment>\n        <BreadcrumbBar\n          nav1={`Deck ${currentDeck.name}`}\n          link1={`/decks/${deckId}`}\n          nav2={`Edit Card ${cardId}`}\n        />\n        <h2 className=\"mt-2\">Edit Card</h2>\n        <CardForm\n          newCard={newCard}\n          setNewCard={setNewCard}\n          editCardState={editCardState}\n          setEditCardState={setEditCardState}\n          cardFront={editCardState.front}\n          cardBack={editCardState.back}\n        />\n        <button\n          className=\"btn btn-secondary mr-2\"\n          id=\"doneEditCard\"\n          onClick={onCancel}\n        >\n          Cancel\n        </button>\n        <button\n          className=\"btn btn-primary\"\n          id=\"submitEditCard\"\n          onClick={onSubmit}\n        >\n          Submit\n        </button>\n      </Fragment>\n    );\n  }\n  return \"Loading\";\n}\n\nexport default EditCard;\n"]},"metadata":{},"sourceType":"module"}