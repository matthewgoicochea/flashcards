{"ast":null,"code":"var _jsxFileName = \"/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/Study.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { readDeck } from \"../utils/api\";\nimport NavBar from \"./NavBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Study({\n  //studyDeck,\n  //setStudyDeck,\n  studyState,\n  setStudyState,\n  OnClick\n}) {\n  _s();\n\n  const params = useParams();\n  const deckId = params.deckId;\n  const history = useHistory();\n  const [studyDeck, setStudyDeck] = useState(false);\n  const [studySt, setStudySt] = useState({\n    deckId: 0,\n    cards: {},\n    cardNumber: 0,\n    flipped: false,\n    name: \"name\",\n    description: \"description\"\n  });\n  useEffect(() => {\n    const deck = readDeck(deckId);\n    deck.then(deck => {\n      const studyCards = deck.cards;\n      setStudyDeck(deck);\n      setStudySt({ ...studySt,\n        deckId: deck.id,\n        cards: deck.cards,\n        name: deck.name,\n        description\n      });\n    });\n  }, []);\n  console.log(studyDeck);\n\n  const onFlip = () => {\n    console.log(\"flip\");\n  };\n\n  const front = \"front\";\n  const back = \"back\";\n\n  const flipBtn = /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onFlip,\n    className: \"btn btn-secondary\",\n    children: \"Flip\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n\n  const studyCard = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"card-title\",\n        children: [\"Card \", 1, \" of \", 7]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: true ? front : back\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), flipBtn]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Study: \", studyDeck ? studyDeck.name : \"...loading\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), studyCard]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n} //}{\" \"} //      in this deck. //  </p> //<button className=\"btn btn-primary\" id=\"addCards\" onClick={OnClick}> //Add Cards // </button> //</Fragment> //); //const path = \"TESTING\";\n//const deckLength = studyDeck ? studyState.cards.length : 0; //\"...loading\";\n//const temp = readDeck(deckId).then((response) => setStudyDeck(response));\n//console.log(temp);\n\n/*\n  useEffect(() => {\n    async function loadDeck() {\n      const response = await fetch(\n        `http://localhost:5000/decks/${deckId}?_embed=cards`\n      );\n      const deck = await response.json();\n      setStudyDeck(deck.cards);\n      setStudyState({ ...studyState, cards: deck.cards, name: deck.name });\n    }\n    loadDeck();\n    console.log(deckLength);\n  }, []);\n\n  const onFlip = () => {\n    setStudyState({ ...studyState, flipped: !studyState.flipped });\n  };\n\n  const onNext = () => {\n    if (studyState.studyCardNum + 1 === deckLength) {\n      const restart = window.confirm(\n        \"Restart cards? \\n \\n Click 'cancel' to return to the home page.\"\n      );\n      if (restart) {\n        setStudyState({\n          ...studyState,\n          studyCardNum: 0,\n          flipped: false,\n        });\n      } else {\n        history.push(\"/\");\n      }\n    } else {\n      setStudyState({\n        ...studyState,\n        flipped: false,\n        studyCardNum: studyState.studyCardNum + 1,\n      });\n    }\n  };\n\n  const flipBtn = (\n    <button onClick={onFlip} className=\"btn btn-secondary\">\n      Flip\n    </button>\n  );\n\n  const bothBtns = (\n    <Fragment>\n      <button onClick={onFlip} id=\"flipFront\" className=\"btn btn-secondary\">\n        Flip\n      </button>\n      <button onClick={onNext} id=\"flipBack\" className=\"btn btn-primary\">\n        Next\n      </button>\n    </Fragment>\n  );\n\n  const front = studyDeck\n    ? studyDeck[studyState.studyCardNum].front\n    : \"loading...\";\n\n  const back = studyDeck\n    ? studyDeck[studyState.studyCardNum].back\n    : \"loading...\";\n\n  const studyCard = (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">\n          Card {studyState.studyCardNum + 1} of {deckLength}\n        </h5>\n        <p className=\"card-text\">{studyState.flipped ? back : front}</p>\n        {studyState.flipped ? bothBtns : flipBtn}\n      </div>\n    </div>\n  );*/\n\n/*\n  const notEnoughCards = (\n    <Fragment>\n      <h2>Not enough cards.</h2>\n      <p>\n        You need at least 3 cards to study. There{\" \"}\n        {/*deckLength === 1 ? `is ${deckLength} card` : `are ${deckLength} cards`*/\n\n\n_s(Study, \"NuV1OLhK5j0kxVAZqY/5hvwwtiA=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = Study;\nexport default Study;\n/***\n * \n * \n *   return (\n    <Fragment>\n      <NavBar OnClick={OnClick} path={studyState.name} />\n      <h1>Study: {studyDeck ? studyState.name : \"...loading\"}</h1>\n      {/*studyState.studyCardNum <= deckLength ? studyCard : \"...loading\"*/\n//}\n// {/*deckLength >= 3 ? studyCard : notEnoughCards*/}\n//\t</Fragment>\n//\t\t);\n//*/\n\n/*\n  const [studyDeck, setStudyDeck] = useState(false);\n  const [studyState, setStudyState] = useState({\n    studyCardNum: 0,\n    flipped: false,\n    cards: {},\n  });*/\n\nvar _c;\n\n$RefreshReg$(_c, \"Study\");","map":{"version":3,"sources":["/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/Study.jsx"],"names":["React","Fragment","useEffect","useState","useHistory","useParams","readDeck","NavBar","Study","studyState","setStudyState","OnClick","params","deckId","history","studyDeck","setStudyDeck","studySt","setStudySt","cards","cardNumber","flipped","name","description","deck","then","studyCards","id","console","log","onFlip","front","back","flipBtn","studyCard"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,cAAtC;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;AAEA,SAASC,KAAT,CAAe;AACb;AACA;AACAC,EAAAA,UAHa;AAIbC,EAAAA,aAJa;AAKbC,EAAAA;AALa,CAAf,EAMG;AAAA;;AACD,QAAMC,MAAM,GAAGP,SAAS,EAAxB;AACA,QAAMQ,MAAM,GAAGD,MAAM,CAACC,MAAtB;AACA,QAAMC,OAAO,GAAGV,UAAU,EAA1B;AAEA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC;AACrCU,IAAAA,MAAM,EAAE,CAD6B;AAErCM,IAAAA,KAAK,EAAE,EAF8B;AAGrCC,IAAAA,UAAU,EAAE,CAHyB;AAIrCC,IAAAA,OAAO,EAAE,KAJ4B;AAKrCC,IAAAA,IAAI,EAAE,MAL+B;AAMrCC,IAAAA,WAAW,EAAE;AANwB,GAAD,CAAtC;AASArB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMsB,IAAI,GAAGlB,QAAQ,CAACO,MAAD,CAArB;AACAW,IAAAA,IAAI,CAACC,IAAL,CAAWD,IAAD,IAAU;AAClB,YAAME,UAAU,GAAGF,IAAI,CAACL,KAAxB;AACAH,MAAAA,YAAY,CAACQ,IAAD,CAAZ;AACAN,MAAAA,UAAU,CAAC,EAAE,GAAGD,OAAL;AAAcJ,QAAAA,MAAM,EAAEW,IAAI,CAACG,EAA3B;AAA+BR,QAAAA,KAAK,EAAEK,IAAI,CAACL,KAA3C;AAAkDG,QAAAA,IAAI,EAAEE,IAAI,CAACF,IAA7D;AAAmEC,QAAAA;AAAnE,OAAD,CAAV;AACD,KAJD;AAKD,GAPQ,EAON,EAPM,CAAT;AASAK,EAAAA,OAAO,CAACC,GAAR,CAAYd,SAAZ;;AAEA,QAAMe,MAAM,GAAG,MAAM;AACnBF,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD,GAFD;;AAIA,QAAME,KAAK,GAAG,OAAd;AACA,QAAMC,IAAI,GAAG,MAAb;;AAEA,QAAMC,OAAO,gBACX;AAAQ,IAAA,OAAO,EAAEH,MAAjB;AAAyB,IAAA,SAAS,EAAC,mBAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAMA,QAAMI,SAAS,gBACb;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,YAAd;AAAA,4BACQ,CADR,UACe,CADf;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAA,kBAAI,OAAOH,KAAP,GAAeC;AAAnB;AAAA;AAAA;AAAA;AAAA,cAJF,EAKGC,OALH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;;AAYA,sBACE,QAAC,QAAD;AAAA,4BACE;AAAA,4BAAYlB,SAAS,GAAGA,SAAS,CAACO,IAAb,GAAoB,YAAzC;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGY,SAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,C,CAAC;AAEF;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAzJS1B,K;UAOQH,S,EAECD,U;;;KATTI,K;AAyJ2E,eAAeA,KAAf;AAEpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAA4E;AAC5E;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { readDeck } from \"../utils/api\";\nimport NavBar from \"./NavBar\";\n\nfunction Study({\n  //studyDeck,\n  //setStudyDeck,\n  studyState,\n  setStudyState,\n  OnClick,\n}) {\n  const params = useParams();\n  const deckId = params.deckId;\n  const history = useHistory();\n\n  const [studyDeck, setStudyDeck] = useState(false);\n  const [studySt, setStudySt] = useState({\n    deckId: 0,\n    cards: {},\n    cardNumber: 0,\n    flipped: false,\n    name: \"name\",\n    description: \"description\",\n  });\n\n  useEffect(() => {\n    const deck = readDeck(deckId);\n    deck.then((deck) => {\n      const studyCards = deck.cards;\n      setStudyDeck(deck);\n      setStudySt({ ...studySt, deckId: deck.id, cards: deck.cards, name: deck.name, description });\n    });\n  }, []);\n\n  console.log(studyDeck);\n\n  const onFlip = () => {\n    console.log(\"flip\");\n  };\n\n  const front = \"front\";\n  const back = \"back\";\n\n  const flipBtn = (\n    <button onClick={onFlip} className=\"btn btn-secondary\">\n      Flip\n    </button>\n  );\n\n  const studyCard = (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">\n          Card {1} of {7}\n        </h5>\n        <p>{true ? front : back}</p>\n        {flipBtn}\n      </div>\n    </div>\n  );\n\n  return (\n    <Fragment>\n      <h1>Study: {studyDeck ? studyDeck.name : \"...loading\"}</h1>\n      {studyCard}\n    </Fragment>\n  );\n} //}{\" \"} //      in this deck. //  </p> //<button className=\"btn btn-primary\" id=\"addCards\" onClick={OnClick}> //Add Cards // </button> //</Fragment> //); //const path = \"TESTING\";\n\n//const deckLength = studyDeck ? studyState.cards.length : 0; //\"...loading\";\n\n//const temp = readDeck(deckId).then((response) => setStudyDeck(response));\n//console.log(temp);\n\n/*\n  useEffect(() => {\n    async function loadDeck() {\n      const response = await fetch(\n        `http://localhost:5000/decks/${deckId}?_embed=cards`\n      );\n      const deck = await response.json();\n      setStudyDeck(deck.cards);\n      setStudyState({ ...studyState, cards: deck.cards, name: deck.name });\n    }\n    loadDeck();\n    console.log(deckLength);\n  }, []);\n\n  const onFlip = () => {\n    setStudyState({ ...studyState, flipped: !studyState.flipped });\n  };\n\n  const onNext = () => {\n    if (studyState.studyCardNum + 1 === deckLength) {\n      const restart = window.confirm(\n        \"Restart cards? \\n \\n Click 'cancel' to return to the home page.\"\n      );\n      if (restart) {\n        setStudyState({\n          ...studyState,\n          studyCardNum: 0,\n          flipped: false,\n        });\n      } else {\n        history.push(\"/\");\n      }\n    } else {\n      setStudyState({\n        ...studyState,\n        flipped: false,\n        studyCardNum: studyState.studyCardNum + 1,\n      });\n    }\n  };\n\n  const flipBtn = (\n    <button onClick={onFlip} className=\"btn btn-secondary\">\n      Flip\n    </button>\n  );\n\n  const bothBtns = (\n    <Fragment>\n      <button onClick={onFlip} id=\"flipFront\" className=\"btn btn-secondary\">\n        Flip\n      </button>\n      <button onClick={onNext} id=\"flipBack\" className=\"btn btn-primary\">\n        Next\n      </button>\n    </Fragment>\n  );\n\n  const front = studyDeck\n    ? studyDeck[studyState.studyCardNum].front\n    : \"loading...\";\n\n  const back = studyDeck\n    ? studyDeck[studyState.studyCardNum].back\n    : \"loading...\";\n\n  const studyCard = (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">\n          Card {studyState.studyCardNum + 1} of {deckLength}\n        </h5>\n        <p className=\"card-text\">{studyState.flipped ? back : front}</p>\n        {studyState.flipped ? bothBtns : flipBtn}\n      </div>\n    </div>\n  );*/\n/*\n  const notEnoughCards = (\n    <Fragment>\n      <h2>Not enough cards.</h2>\n      <p>\n        You need at least 3 cards to study. There{\" \"}\n        {/*deckLength === 1 ? `is ${deckLength} card` : `are ${deckLength} cards`*/ export default Study;\n\n/***\n * \n * \n *   return (\n    <Fragment>\n      <NavBar OnClick={OnClick} path={studyState.name} />\n      <h1>Study: {studyDeck ? studyState.name : \"...loading\"}</h1>\n      {/*studyState.studyCardNum <= deckLength ? studyCard : \"...loading\"*/ //}\n// {/*deckLength >= 3 ? studyCard : notEnoughCards*/}\n//\t</Fragment>\n//\t\t);\n//*/\n\n/*\n  const [studyDeck, setStudyDeck] = useState(false);\n  const [studyState, setStudyState] = useState({\n    studyCardNum: 0,\n    flipped: false,\n    cards: {},\n  });*/\n"]},"metadata":{},"sourceType":"module"}