{"ast":null,"code":"var _jsxFileName = \"/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/Study.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { listCards } from \"../utils/api\"; //import { listCards, readDeck } from \"../utils/api\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Study({\n  OnClick,\n  currentDeck,\n  setCurrentDeck,\n  deckLength,\n  //setDeckLength,\n  //currentCardsArray,\n  //allDecksWithCards,\n  currentDeckId\n}) {\n  _s();\n\n  const history = useHistory();\n  const [flipped, setFlipped] = useState(false);\n  const [currentCardNumber, setCurrentCardNumber] = useState(0);\n  const [front, setFront] = useState(\"front\"); //const [back, setBack] = useState(\"back\");\n  //const [cards, setCards] = useState();\n  //const cardsList = listCards(currentDeckId).then((response) => response);\n\n  const temp = items => /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: [\"test \", items]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 27\n  }, this);\n\n  useEffect(() => {\n    async function loadDeckCards() {\n      const response = await fetch(`http://localhost:5000/decks/${currentDeckId}?_embed=cards`);\n      const deckCardsFromAPI = await response.json();\n      setCurrentDeck(deckCardsFromAPI);\n      const cardFront = await currentDeck.cards[0].front;\n      const cardBack = await currentDeck.cards[0].front;\n      console.log(\"HERE\", currentDeck.cards[0]);\n      setFront(cardFront); //setBack(cardBack);\n    }\n\n    loadDeckCards();\n  }, []);\n\n  const onFlip = () => {\n    setFlipped(prevState => !prevState);\n  };\n\n  const onNext = () => {\n    if (currentCardNumber === deckLength) {\n      const restart = window.confirm(\"Restart cards? \\n \\n Click 'cancel' to return to the home page.\");\n\n      if (restart === true) {\n        setFlipped(false);\n        setCurrentCardNumber(1);\n      } else {\n        history.push(\"/\");\n      }\n    } else {\n      setCurrentCardNumber(prevValue => prevValue + 1);\n      setFlipped(false);\n    }\n  };\n\n  const flipBtn = /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onFlip,\n    className: \"btn btn-secondary\",\n    children: \"Flip\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n\n  const bothBtns = /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onFlip,\n      className: \"btn btn-secondary\",\n      children: \"Flip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onNext,\n      className: \"btn btn-primary\",\n      children: \"Flip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n\n  const card = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"card-title\",\n        children: [\"Card \", currentCardNumber, \" of //\", deckLength]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"card-text\",\n        children: flipped ? back : front\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), flipped ? bothBtns : flipBtn]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n\n  const notEnoughCards = /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Not enough cards.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"You need at least 3 cards to study. There\", \" \", deckLength === 1 ? `is ${deckLength} card` : `are ${deckLength} cards`, \" \", \"in this deck.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      id: \"addCards\",\n      onClick: OnClick,\n      children: \"Add Cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Study: \", \"current deck name\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), card, temp()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Study, \"Lk97xmyT9tu3fbb/gV/18rjoMmE=\", false, function () {\n  return [useHistory];\n});\n\n_c = Study;\nexport default Study;\n/*\n\n  const params = useParams();\n  const history = useHistory();\n  const deckId = params.deckId;\n  //const temp = readDeck(deckId).then(console.log);\n\n  const [flipped, setFlipped] = useState(false);\n  const [currentCardNumber, setCurrentCardNumber] = useState(0);\n\n  const [front, setFront] = useState(\"front\");\n  const [back, setBack] = useState(\"back\");\n  const [currentCards, setCurrentCards] = useState([]);\n\n  //sets current deck with it's cards\n  useEffect(() => {\n    async function loadDeck() {\n      const response = await fetch(\n        `http://localhost:5000/decks/${deckId}?_embed=cards`\n      );\n      const deckFromAPI = await response.json();\n      setCurrentDeck(deckFromAPI);\n    }\n    loadDeck();\n    console.log(currentDeck);\n    console.log(deckId);\n    //}, [deckId, currentDeck]); //this is right but makes computer slow while running server\n  }, [deckId]);\n\n  useEffect(() => {\n    async function loadCards() {\n      const response = await fetch(\n        `http://localhost:5000/cards?deckId=${deckId}`\n      );\n      const cardsFromAPI = await response.json();\n      setCurrentCards(cardsFromAPI);\n    }\n    loadCards();\n  }, []);\n\n  useEffect(() => {\n    console.log(\"HERE\", allDecksWithCards);\n    const temp = allDecksWithCards.find((deck) => {\n      if (`${deck.id}` === deckId) {\n        return deck;\n      }\n    });\n    console.log(\"TEMP\", temp.cards[0].front);\n\t\tconst len = temp.cards.length;\n    setFront(temp.cards[0].front);\n    setBack(temp.cards[0].back);\n\n    setCurrentCardNumber(temp.cards[0].id);\n    setDeckLength(len);\n  }, [currentCardsArray]);\n\n\n*/\n\n/*\n\n  useEffect(() => {\n    async function loadContent() {\n      const response = await fetch(\n        `http://localhost:5000/cards?deckId=${deckId}`\n      );\n      const cardsAPI = await response.json();\n     // setFront(cardsAPI[currentCardNumber - 1].front);\n      setBack(cardsAPI[currentCardNumber - 1].back);\n      setDeckLength(cardsAPI.length);\n    }\n    loadContent();\n  });\n  // check dependency*/\n\nvar _c;\n\n$RefreshReg$(_c, \"Study\");","map":{"version":3,"sources":["/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/Study.jsx"],"names":["React","Fragment","useEffect","useState","useHistory","listCards","Study","OnClick","currentDeck","setCurrentDeck","deckLength","currentDeckId","history","flipped","setFlipped","currentCardNumber","setCurrentCardNumber","front","setFront","temp","items","loadDeckCards","response","fetch","deckCardsFromAPI","json","cardFront","cards","cardBack","console","log","onFlip","prevState","onNext","restart","window","confirm","push","prevValue","flipBtn","bothBtns","card","back","notEnoughCards"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { listCards } from \"../utils/api\";\n//import { listCards, readDeck } from \"../utils/api\";\n\nfunction Study({\n  OnClick,\n  currentDeck,\n  setCurrentDeck,\n  deckLength,\n  //setDeckLength,\n  //currentCardsArray,\n  //allDecksWithCards,\n  currentDeckId,\n}) {\n  const history = useHistory();\n\n  const [flipped, setFlipped] = useState(false);\n  const [currentCardNumber, setCurrentCardNumber] = useState(0);\n  const [front, setFront] = useState(\"front\");\n  //const [back, setBack] = useState(\"back\");\n  //const [cards, setCards] = useState();\n  //const cardsList = listCards(currentDeckId).then((response) => response);\n\n  const temp = (items) => <ul>test {items}</ul>;\n\n  useEffect(() => {\n    async function loadDeckCards() {\n      const response = await fetch(\n        `http://localhost:5000/decks/${currentDeckId}?_embed=cards`\n      );\n      const deckCardsFromAPI = await response.json();\n      setCurrentDeck(deckCardsFromAPI);\n      const cardFront = await currentDeck.cards[0].front;\n      const cardBack = await currentDeck.cards[0].front;\n      console.log(\"HERE\", currentDeck.cards[0]);\n      setFront(cardFront);\n      //setBack(cardBack);\n    }\n    loadDeckCards();\n  }, []);\n\n  const onFlip = () => {\n    setFlipped((prevState) => !prevState);\n  };\n\n  const onNext = () => {\n    if (currentCardNumber === deckLength) {\n      const restart = window.confirm(\n        \"Restart cards? \\n \\n Click 'cancel' to return to the home page.\"\n      );\n      if (restart === true) {\n        setFlipped(false);\n        setCurrentCardNumber(1);\n      } else {\n        history.push(\"/\");\n      }\n    } else {\n      setCurrentCardNumber((prevValue) => prevValue + 1);\n      setFlipped(false);\n    }\n  };\n\n  const flipBtn = (\n    <button onClick={onFlip} className=\"btn btn-secondary\">\n      Flip\n    </button>\n  );\n\n  const bothBtns = (\n    <Fragment>\n      <button onClick={onFlip} className=\"btn btn-secondary\">\n        Flip\n      </button>\n      <button onClick={onNext} className=\"btn btn-primary\">\n        Flip\n      </button>\n    </Fragment>\n  );\n\n  const card = (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">\n          Card {currentCardNumber} of //{deckLength}\n        </h5>\n        <p className=\"card-text\">{flipped ? back : front}</p>\n        {flipped ? bothBtns : flipBtn}\n      </div>\n    </div>\n  );\n\n  const notEnoughCards = (\n    <Fragment>\n      <h2>Not enough cards.</h2>\n      <p>\n        You need at least 3 cards to study. There{\" \"}\n        {deckLength === 1 ? `is ${deckLength} card` : `are ${deckLength} cards`}{\" \"}\n        in this deck.\n      </p>\n      <button className=\"btn btn-primary\" id=\"addCards\" onClick={OnClick}>\n        Add Cards\n      </button>\n    </Fragment>\n  );\n\n  return (\n    <Fragment>\n      <h1>Study: {\"current deck name\"}</h1>\n      {card}\n      {temp()}\n\n      {/*deckLength < 3 ? notEnoughCards : card*/}\n    </Fragment>\n  );\n}\n\nexport default Study;\n\n/*\n\n  const params = useParams();\n  const history = useHistory();\n  const deckId = params.deckId;\n  //const temp = readDeck(deckId).then(console.log);\n\n  const [flipped, setFlipped] = useState(false);\n  const [currentCardNumber, setCurrentCardNumber] = useState(0);\n\n  const [front, setFront] = useState(\"front\");\n  const [back, setBack] = useState(\"back\");\n  const [currentCards, setCurrentCards] = useState([]);\n\n  //sets current deck with it's cards\n  useEffect(() => {\n    async function loadDeck() {\n      const response = await fetch(\n        `http://localhost:5000/decks/${deckId}?_embed=cards`\n      );\n      const deckFromAPI = await response.json();\n      setCurrentDeck(deckFromAPI);\n    }\n    loadDeck();\n    console.log(currentDeck);\n    console.log(deckId);\n    //}, [deckId, currentDeck]); //this is right but makes computer slow while running server\n  }, [deckId]);\n\n  useEffect(() => {\n    async function loadCards() {\n      const response = await fetch(\n        `http://localhost:5000/cards?deckId=${deckId}`\n      );\n      const cardsFromAPI = await response.json();\n      setCurrentCards(cardsFromAPI);\n    }\n    loadCards();\n  }, []);\n\n  useEffect(() => {\n    console.log(\"HERE\", allDecksWithCards);\n    const temp = allDecksWithCards.find((deck) => {\n      if (`${deck.id}` === deckId) {\n        return deck;\n      }\n    });\n    console.log(\"TEMP\", temp.cards[0].front);\n\t\tconst len = temp.cards.length;\n    setFront(temp.cards[0].front);\n    setBack(temp.cards[0].back);\n\n    setCurrentCardNumber(temp.cards[0].id);\n    setDeckLength(len);\n  }, [currentCardsArray]);\n\n\n*/\n\n/*\n\n  useEffect(() => {\n    async function loadContent() {\n      const response = await fetch(\n        `http://localhost:5000/cards?deckId=${deckId}`\n      );\n      const cardsAPI = await response.json();\n     // setFront(cardsAPI[currentCardNumber - 1].front);\n      setBack(cardsAPI[currentCardNumber - 1].back);\n      setDeckLength(cardsAPI.length);\n    }\n    loadContent();\n  });\n  // check dependency*/\n"]},"metadata":{},"sourceType":"module"}