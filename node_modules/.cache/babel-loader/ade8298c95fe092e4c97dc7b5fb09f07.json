{"ast":null,"code":"var _jsxFileName = \"/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/Study.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { listCards, readDeck } from \"../utils/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Study({\n  OnClick,\n  currentDeck,\n  setCurrentDeck,\n  deckLength,\n  setDeckLength,\n  currentCardsArray\n}) {\n  _s();\n\n  const params = useParams();\n  const history = useHistory();\n  const deckId = params.deckId; //const temp = readDeck(deckId).then(console.log);\n\n  const [flipped, setFlipped] = useState(false);\n  const [currentCardNumber, setCurrentCardNumber] = useState(0);\n  const [front, setFront] = useState(\"front\");\n  const [back, setBack] = useState(\"back\");\n  const [currentCards, setCurrentCards] = useState([]); //sets current deck with it's cards\n\n  useEffect(() => {\n    async function loadDeck() {\n      const response = await fetch(`http://localhost:5000/decks/${deckId}?_embed=cards`);\n      const deckFromAPI = await response.json();\n      setCurrentDeck(deckFromAPI);\n    }\n\n    loadDeck();\n    console.log(currentDeck);\n    console.log(deckId); //}, [deckId, currentDeck]); //this is right but makes computer slow while running server\n  }, [deckId]);\n  useEffect(() => {\n    async function loadCards() {\n      const response = await fetch(`http://localhost:5000/cards?deckId=${deckId}`);\n      const cardsFromAPI = await response.json();\n      setCurrentCards(cardsFromAPI);\n    }\n\n    loadCards();\n  }, []);\n  useEffect(() => {\n    console.log(currentCards[0]); //setFront(currentCards[0].front);\n  }, []);\n\n  const onFlip = () => {\n    setFlipped(prevState => !prevState);\n  };\n\n  const onNext = () => {\n    if (currentCardNumber === deckLength) {\n      const restart = window.confirm(\"Restart cards? \\n \\n Click 'cancel' to return to the home page.\");\n\n      if (restart === true) {\n        setFlipped(false);\n        setCurrentCardNumber(1);\n      } else {\n        history.push(\"/\");\n      }\n    } else {\n      setCurrentCardNumber(prevValue => prevValue + 1);\n      setFlipped(false);\n    }\n  };\n\n  const flipBtn = /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onFlip,\n    className: \"btn btn-secondary\",\n    children: \"Flip\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n\n  const bothBtns = /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onFlip,\n      className: \"btn btn-secondary\",\n      children: \"Flip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onNext,\n      className: \"btn btn-primary\",\n      children: \"Flip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n\n  const card = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"card-title\",\n        children: [\"Card \", currentCardNumber, \" of \", deckLength]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"card-text\",\n        children: flipped ? back : front\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), flipped ? bothBtns : flipBtn]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n\n  const notEnoughCards = /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Not enough cards.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"You need at least 3 cards to study. There\", \" \", deckLength === 1 ? `is ${deckLength} card` : `are ${deckLength} cards`, \" \", \"in this deck.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      id: \"addCards\",\n      onClick: OnClick,\n      children: \"Add Cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Study: \", \"current deck name\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), deckLength < 3 ? notEnoughCards : card]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Study, \"2DM83Gv454rIgpMJ0BCQjyq79k4=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = Study;\nexport default Study;\n/*\n\n  useEffect(() => {\n    async function loadContent() {\n      const response = await fetch(\n        `http://localhost:5000/cards?deckId=${deckId}`\n      );\n      const cardsAPI = await response.json();\n     // setFront(cardsAPI[currentCardNumber - 1].front);\n      setBack(cardsAPI[currentCardNumber - 1].back);\n      setDeckLength(cardsAPI.length);\n    }\n    loadContent();\n  });\n  // check dependency*/\n\nvar _c;\n\n$RefreshReg$(_c, \"Study\");","map":{"version":3,"sources":["/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/Study.jsx"],"names":["React","Fragment","useEffect","useState","useHistory","useParams","listCards","readDeck","Study","OnClick","currentDeck","setCurrentDeck","deckLength","setDeckLength","currentCardsArray","params","history","deckId","flipped","setFlipped","currentCardNumber","setCurrentCardNumber","front","setFront","back","setBack","currentCards","setCurrentCards","loadDeck","response","fetch","deckFromAPI","json","console","log","loadCards","cardsFromAPI","onFlip","prevState","onNext","restart","window","confirm","push","prevValue","flipBtn","bothBtns","card","notEnoughCards"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { listCards, readDeck } from \"../utils/api\";\n\nfunction Study({\n  OnClick,\n  currentDeck,\n  setCurrentDeck,\n  deckLength,\n  setDeckLength,\n  currentCardsArray,\n}) {\n  const params = useParams();\n  const history = useHistory();\n  const deckId = params.deckId;\n  //const temp = readDeck(deckId).then(console.log);\n\n  const [flipped, setFlipped] = useState(false);\n  const [currentCardNumber, setCurrentCardNumber] = useState(0);\n\n  const [front, setFront] = useState(\"front\");\n  const [back, setBack] = useState(\"back\");\n  const [currentCards, setCurrentCards] = useState([]);\n\n  //sets current deck with it's cards\n  useEffect(() => {\n    async function loadDeck() {\n      const response = await fetch(\n        `http://localhost:5000/decks/${deckId}?_embed=cards`\n      );\n      const deckFromAPI = await response.json();\n      setCurrentDeck(deckFromAPI);\n    }\n    loadDeck();\n    console.log(currentDeck);\n    console.log(deckId);\n    //}, [deckId, currentDeck]); //this is right but makes computer slow while running server\n  }, [deckId]);\n\n  useEffect(() => {\n    async function loadCards() {\n      const response = await fetch(\n        `http://localhost:5000/cards?deckId=${deckId}`\n      );\n      const cardsFromAPI = await response.json();\n      setCurrentCards(cardsFromAPI);\n    }\n    loadCards();\n  }, []);\n\n  useEffect(() => {\n\t\t\n    console.log(currentCards[0]);\n    //setFront(currentCards[0].front);\n  }, []);\n\n  const onFlip = () => {\n    setFlipped((prevState) => !prevState);\n  };\n\n  const onNext = () => {\n    if (currentCardNumber === deckLength) {\n      const restart = window.confirm(\n        \"Restart cards? \\n \\n Click 'cancel' to return to the home page.\"\n      );\n      if (restart === true) {\n        setFlipped(false);\n        setCurrentCardNumber(1);\n      } else {\n        history.push(\"/\");\n      }\n    } else {\n      setCurrentCardNumber((prevValue) => prevValue + 1);\n      setFlipped(false);\n    }\n  };\n\n  const flipBtn = (\n    <button onClick={onFlip} className=\"btn btn-secondary\">\n      Flip\n    </button>\n  );\n\n  const bothBtns = (\n    <Fragment>\n      <button onClick={onFlip} className=\"btn btn-secondary\">\n        Flip\n      </button>\n      <button onClick={onNext} className=\"btn btn-primary\">\n        Flip\n      </button>\n    </Fragment>\n  );\n\n  const card = (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">\n          Card {currentCardNumber} of {deckLength}\n        </h5>\n        <p className=\"card-text\">{flipped ? back : front}</p>\n        {flipped ? bothBtns : flipBtn}\n      </div>\n    </div>\n  );\n\n  const notEnoughCards = (\n    <Fragment>\n      <h2>Not enough cards.</h2>\n      <p>\n        You need at least 3 cards to study. There{\" \"}\n        {deckLength === 1 ? `is ${deckLength} card` : `are ${deckLength} cards`}{\" \"}\n        in this deck.\n      </p>\n      <button className=\"btn btn-primary\" id=\"addCards\" onClick={OnClick}>\n        Add Cards\n      </button>\n    </Fragment>\n  );\n\n  return (\n    <Fragment>\n      <h1>Study: {\"current deck name\"}</h1>\n      {deckLength < 3 ? notEnoughCards : card}\n    </Fragment>\n  );\n}\n\nexport default Study;\n\n/*\n\n  useEffect(() => {\n    async function loadContent() {\n      const response = await fetch(\n        `http://localhost:5000/cards?deckId=${deckId}`\n      );\n      const cardsAPI = await response.json();\n     // setFront(cardsAPI[currentCardNumber - 1].front);\n      setBack(cardsAPI[currentCardNumber - 1].back);\n      setDeckLength(cardsAPI.length);\n    }\n    loadContent();\n  });\n  // check dependency*/\n"]},"metadata":{},"sourceType":"module"}