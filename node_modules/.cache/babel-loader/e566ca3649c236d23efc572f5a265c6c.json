{"ast":null,"code":"var _jsxFileName = \"/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/DeckList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, Fragment } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { listDecks, deleteDeck } from \"../utils/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DeckList({\n  OnClick,\n  allDecksWithCards,\n  setAllDecksWithCards\n}) {\n  _s();\n\n  const history = useHistory();\n  const newAllDecksArray = Array.from(allDecksWithCards);\n  const listItemDecks = newAllDecksArray.map(deck => createCardForDeck(deck.name, deck.description, deck.id, deck.cards.length));\n  useEffect(() => {\n    async function loadDecksWithCards() {\n      const decks = await listDecks();\n      setAllDecksWithCards(decks);\n    }\n\n    loadDecksWithCards(); //}, [allDecksWithCards]);\n  }, []);\n}\n\n_s(DeckList, \"bz2N+u0mX89LO9zOCfVCA9Sa20M=\", false, function () {\n  return [useHistory];\n});\n\n_c = DeckList;\n\nfunction onDeleteDeck(event) {\n  const restart = window.confirm(\"Delete this deck? \\n \\n You will not be able to recover it.\");\n\n  if (restart) {\n    const deckIdToDelete = event.target.parentNode.id;\n    deleteDeck(deckIdToDelete);\n    /*fetch(`http://localhost:5000/decks/${deckIdToDelete}`, {\n        method: \"DELETE\",\n      });*/\n\n    history.go(0);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-group\",\n      children: listItemDecks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\nexport default DeckList;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckList\");","map":{"version":3,"sources":["/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/DeckList.jsx"],"names":["React","useEffect","Fragment","useHistory","listDecks","deleteDeck","DeckList","OnClick","allDecksWithCards","setAllDecksWithCards","history","newAllDecksArray","Array","from","listItemDecks","map","deck","createCardForDeck","name","description","id","cards","length","loadDecksWithCards","decks","onDeleteDeck","event","restart","window","confirm","deckIdToDelete","target","parentNode","go"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,cAAtC;;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,iBAAX;AAA8BC,EAAAA;AAA9B,CAAlB,EAAwE;AAAA;;AACtE,QAAMC,OAAO,GAAGP,UAAU,EAA1B;AACA,QAAMQ,gBAAgB,GAAGC,KAAK,CAACC,IAAN,CAAWL,iBAAX,CAAzB;AAID,QAAMM,aAAa,GAAGH,gBAAgB,CAACI,GAAjB,CAAsBC,IAAD,IACxCC,iBAAiB,CAACD,IAAI,CAACE,IAAN,EAAYF,IAAI,CAACG,WAAjB,EAA8BH,IAAI,CAACI,EAAnC,EAAuCJ,IAAI,CAACK,KAAL,CAAWC,MAAlD,CADE,CAAtB;AAICrB,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAesB,kBAAf,GAAoC;AAClC,YAAMC,KAAK,GAAG,MAAMpB,SAAS,EAA7B;AACAK,MAAAA,oBAAoB,CAACe,KAAD,CAApB;AACD;;AACDD,IAAAA,kBAAkB,GALJ,CAMd;AACD,GAPQ,EAON,EAPM,CAAT;AAQD;;GAlBQjB,Q;UACSH,U;;;KADTG,Q;;AAmBT,SAASmB,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,QAAMC,OAAO,GAAGC,MAAM,CAACC,OAAP,CACd,6DADc,CAAhB;;AAGA,MAAIF,OAAJ,EAAa;AACX,UAAMG,cAAc,GAAGJ,KAAK,CAACK,MAAN,CAAaC,UAAb,CAAwBZ,EAA/C;AACAf,IAAAA,UAAU,CAACyB,cAAD,CAAV;AACA;AACJ;AACA;;AAEIpB,IAAAA,OAAO,CAACuB,EAAR,CAAW,CAAX;AACD;;AAID,sBACE,QAAC,QAAD;AAAA,2BACE;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA,gBAA4BnB;AAA5B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;AAED,eAAeR,QAAf","sourcesContent":["import React, { useEffect, Fragment } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { listDecks, deleteDeck } from \"../utils/api\";\n\nfunction DeckList({ OnClick, allDecksWithCards, setAllDecksWithCards }) {\n  const history = useHistory();\n  const newAllDecksArray = Array.from(allDecksWithCards);\n  \n\t\n\t\n\tconst listItemDecks = newAllDecksArray.map((deck) =>\n    createCardForDeck(deck.name, deck.description, deck.id, deck.cards.length)\n  );\n\n  useEffect(() => {\n    async function loadDecksWithCards() {\n      const decks = await listDecks();\n      setAllDecksWithCards(decks);\n    }\n    loadDecksWithCards();\n    //}, [allDecksWithCards]);\n  }, []);\n}\nfunction onDeleteDeck(event) {\n  const restart = window.confirm(\n    \"Delete this deck? \\n \\n You will not be able to recover it.\"\n  );\n  if (restart) {\n    const deckIdToDelete = event.target.parentNode.id;\n    deleteDeck(deckIdToDelete);\n    /*fetch(`http://localhost:5000/decks/${deckIdToDelete}`, {\n        method: \"DELETE\",\n      });*/\n\n    history.go(0);\n  }\n\n  \n\n  return (\n    <Fragment>\n      <ul className=\"list-group\">{listItemDecks}</ul>\n    </Fragment>\n  );\n}\n\nexport default DeckList;\n"]},"metadata":{},"sourceType":"module"}