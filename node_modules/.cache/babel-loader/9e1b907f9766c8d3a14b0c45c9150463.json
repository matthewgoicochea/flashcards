{"ast":null,"code":"var _jsxFileName = \"/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/DeckList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, Fragment } from \"react\";\nimport { listDecks } from \"../utils/api\"; //import NewDeck from \"./NewDeck\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DeckList({\n  OnClick,\n  allDecksWithCards,\n  setAllDecksWithCards\n}) {\n  _s();\n\n  const newAllDecksArray = Array.from(allDecksWithCards);\n  useEffect(() => {\n    async function loadDecksWithCards() {\n      const response = await fetch(`http://localhost:5000/decks?_embed=cards`);\n      const allDecksWithCardsFromAPI = await response.json();\n      setAllDecksWithCards(allDecksWithCardsFromAPI);\n    }\n\n    loadDecksWithCards(); //  }, [allDecksWithCards]);\n  }, []);\n\n  function createCardForDeck(name, description, id, cardsNum) {\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"list-group-item\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card border-0\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-body\",\n            id: id,\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"card-title\",\n              children: name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: `${cardsNum} cards`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"card-text\",\n              children: description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              to: \"/\",\n              className: \"btn btn-secondary\",\n              id: \"viewDeck\",\n              onClick: OnClick,\n              children: \"View\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 27,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              to: \"/\",\n              className: \"btn btn-primary\",\n              id: \"studyDeck\",\n              onClick: OnClick,\n              children: \"Study\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              to: \"/\",\n              className: \"btn btn-danger\",\n              id: \"deleteDeck\",\n              onClick: OnClick,\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this);\n  }\n\n  const newListItems = newAllDecksArray.map(deck => createCardForDeck(deck.name, deck.description, deck.id, deck.cards.length));\n  listDecks().then(result => result.map);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-group\",\n      children: newListItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DeckList, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = DeckList;\nexport default DeckList; //const deckList = [<NewDeck />];\n\n/*\n  useEffect(() => {\n    async function loadAllDecks() {\n      const response = await fetch(\"http://localhost:5000/decks\");\n      const allDecksFromAPI = await response.json();\n      setAllDecks(allDecksFromAPI);\n    }\n    loadAllDecks();\n  }, []);*/\n//add info to decks array\n//const allDecksArray = Array.from(allDecks);\n\n/*\n  const listItems = allDecksArray.map((deck) =>\n    createCardForDeck(deck.name, deck.description, deck.id)\n  );*/\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckList\");","map":{"version":3,"sources":["/Users/Matt/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/DeckList.jsx"],"names":["React","useEffect","Fragment","listDecks","DeckList","OnClick","allDecksWithCards","setAllDecksWithCards","newAllDecksArray","Array","from","loadDecksWithCards","response","fetch","allDecksWithCardsFromAPI","json","createCardForDeck","name","description","id","cardsNum","newListItems","map","deck","cards","length","then","result"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,cAA1B,C,CACA;;;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,iBAAX;AAA8BC,EAAAA;AAA9B,CAAlB,EAAwE;AAAA;;AACtE,QAAMC,gBAAgB,GAAGC,KAAK,CAACC,IAAN,CAAWJ,iBAAX,CAAzB;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeU,kBAAf,GAAoC;AAClC,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,0CAAF,CAA5B;AACA,YAAMC,wBAAwB,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAvC;AACAR,MAAAA,oBAAoB,CAACO,wBAAD,CAApB;AACD;;AACDH,IAAAA,kBAAkB,GANJ,CAOd;AACD,GARQ,EAQN,EARM,CAAT;;AAUA,WAASK,iBAAT,CAA2BC,IAA3B,EAAiCC,WAAjC,EAA8CC,EAA9C,EAAkDC,QAAlD,EAA4D;AAC1D,wBACE,QAAC,QAAD;AAAA,6BACE;AAAI,QAAA,SAAS,EAAC,iBAAd;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,eAAf;AAAA,iCACE;AAAK,YAAA,SAAS,EAAC,WAAf;AAA2B,YAAA,EAAE,EAAED,EAA/B;AAAA,oCACE;AAAI,cAAA,SAAS,EAAC,YAAd;AAAA,wBAA4BF;AAA5B;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAA,wBAAK,GAAEG,QAAS;AAAhB;AAAA;AAAA;AAAA;AAAA,oBAFF,eAGE;AAAG,cAAA,SAAS,EAAC,WAAb;AAAA,wBAA0BF;AAA1B;AAAA;AAAA;AAAA;AAAA,oBAHF,eAIE;AACE,cAAA,EAAE,EAAC,GADL;AAEE,cAAA,SAAS,EAAC,mBAFZ;AAGE,cAAA,EAAE,EAAC,UAHL;AAIE,cAAA,OAAO,EAAEb,OAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,eAYE;AACE,cAAA,EAAE,EAAC,GADL;AAEE,cAAA,SAAS,EAAC,iBAFZ;AAGE,cAAA,EAAE,EAAC,WAHL;AAIE,cAAA,OAAO,EAAEA,OAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAZF,eAoBE;AACE,cAAA,EAAE,EAAC,GADL;AAEE,cAAA,SAAS,EAAC,gBAFZ;AAGE,cAAA,EAAE,EAAC,YAHL;AAIE,cAAA,OAAO,EAAEA,OAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBApBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAqCD;;AAED,QAAMgB,YAAY,GAAGb,gBAAgB,CAACc,GAAjB,CAAsBC,IAAD,IACxCP,iBAAiB,CAACO,IAAI,CAACN,IAAN,EAAYM,IAAI,CAACL,WAAjB,EAA8BK,IAAI,CAACJ,EAAnC,EAAuCI,IAAI,CAACC,KAAL,CAAWC,MAAlD,CADE,CAArB;AAIAtB,EAAAA,SAAS,GAAGuB,IAAZ,CAAkBC,MAAD,IAAYA,MAAM,CAACL,GAApC;AAEA,sBACE,QAAC,QAAD;AAAA,2BACE;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA,gBAA4BD;AAA5B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAhEQjB,Q;;KAAAA,Q;AAkET,eAAeA,QAAf,C,CAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","sourcesContent":["import React, { useEffect, Fragment } from \"react\";\nimport { listDecks } from \"../utils/api\";\n//import NewDeck from \"./NewDeck\";\n\nfunction DeckList({ OnClick, allDecksWithCards, setAllDecksWithCards }) {\n  const newAllDecksArray = Array.from(allDecksWithCards);\n\n  useEffect(() => {\n    async function loadDecksWithCards() {\n      const response = await fetch(`http://localhost:5000/decks?_embed=cards`);\n      const allDecksWithCardsFromAPI = await response.json();\n      setAllDecksWithCards(allDecksWithCardsFromAPI);\n    }\n    loadDecksWithCards();\n    //  }, [allDecksWithCards]);\n  }, []);\n\n  function createCardForDeck(name, description, id, cardsNum) {\n    return (\n      <Fragment>\n        <li className=\"list-group-item\">\n          <div className=\"card border-0\">\n            <div className=\"card-body\" id={id}>\n              <h5 className=\"card-title\">{name}</h5>\n              <p>{`${cardsNum} cards`}</p>\n              <p className=\"card-text\">{description}</p>\n              <button\n                to=\"/\"\n                className=\"btn btn-secondary\"\n                id=\"viewDeck\"\n                onClick={OnClick}\n              >\n                View\n              </button>\n              <button\n                to=\"/\"\n                className=\"btn btn-primary\"\n                id=\"studyDeck\"\n                onClick={OnClick}\n              >\n                Study\n              </button>\n              <button\n                to=\"/\"\n                className=\"btn btn-danger\"\n                id=\"deleteDeck\"\n                onClick={OnClick}\n              >\n                Delete\n              </button>\n            </div>\n          </div>\n        </li>\n      </Fragment>\n    );\n  }\n\n  const newListItems = newAllDecksArray.map((deck) =>\n    createCardForDeck(deck.name, deck.description, deck.id, deck.cards.length)\n  );\n\n  listDecks().then((result) => result.map);\n\n  return (\n    <Fragment>\n      <ul className=\"list-group\">{newListItems}</ul>\n    </Fragment>\n  );\n}\n\nexport default DeckList;\n\n//const deckList = [<NewDeck />];\n/*\n  useEffect(() => {\n    async function loadAllDecks() {\n      const response = await fetch(\"http://localhost:5000/decks\");\n      const allDecksFromAPI = await response.json();\n      setAllDecks(allDecksFromAPI);\n    }\n    loadAllDecks();\n  }, []);*/\n//add info to decks array\n//const allDecksArray = Array.from(allDecks);\n\n/*\n  const listItems = allDecksArray.map((deck) =>\n    createCardForDeck(deck.name, deck.description, deck.id)\n  );*/\n"]},"metadata":{},"sourceType":"module"}